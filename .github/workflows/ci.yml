name: Arogya AI - CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: 🔍 Validate & Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm ls
    
    - name: 🧪 Run tests
      run: npm test
    
    - name: ✅ Validate application
      run: node validate.js
    
    - name: 🔒 Security audit
      run: npm audit --audit-level high --production
      continue-on-error: true
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: arogya-ai-coverage

  build:
    name: 🏗️ Build & Test Production
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install production dependencies
      run: npm ci --only=production --prefer-offline --no-audit
    
    - name: 🏗️ Build application
      run: npm run build
    
    - name: 🧪 Test production build
      env:
        NODE_ENV: production
        PORT: 10000
        GROQ_API_KEY: test-key
      run: |
        timeout 15s npm start &
        SERVER_PID=$!
        sleep 8
        
        # Test health endpoint
        curl -f http://localhost:10000/api/health || exit 1
        
        # Test main page
        curl -f http://localhost:10000/ || exit 1
        
        # Cleanup
        kill $SERVER_PID || true

  docker:
    name: 🐳 Docker Build & Test
    needs: validate
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: arogya-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 🧪 Test Docker container
      run: |
        docker run -d --name arogya-test -p 10000:10000 \
          -e NODE_ENV=production \
          -e GROQ_API_KEY=test-key \
          arogya-ai:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:10000/api/health || exit 1
        
        # Cleanup
        docker stop arogya-test
        docker rm arogya-test

  deploy-ready:
    name: 🚀 Deployment Ready Check
    needs: [validate, build, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ✅ Deployment ready notification
      run: |
        echo "🎉 Arogya AI is ready for deployment!"
        echo "📊 All tests passed"
        echo "🐳 Docker build successful"
        echo "🔒 Security checks completed"
        echo "🚀 Ready to deploy to production platforms"