// Global state management
const state = {
    language: 'english',
    phase: 'initial',
    userInfo: {},
    history: [],
    symptoms: {},
    aiResponse: '',
    isComplete: false
};

// Global variables for application state
let currentLanguage = 'english';
let consultationPhase = 'initial';
let userInfo = {};
let conversationHistory = [];
let collectedSymptoms = {};
let aiGuidanceResponse = '';
let questionCount = 0;
let questionsAsked = 0;
let maxQuestions = 6;
let minQuestions = 3;
let isDataCollectionComplete = false;
let currentModelIndex = 0;

// Production error handling
window.addEventListener('error', function(e) {
    if (process.env.NODE_ENV === 'development') {
        console.error('Error:', e.error);
    }
});

window.addEventListener('unhandledrejection', function(e) {
    if (process.env.NODE_ENV === 'development') {
        console.error('Promise Error:', e.reason);
    }
});

// API Keys - Groq-focused Strategy (Loaded from environment variables)
const API_KEYS = {
    GROQ: '',      // Will be loaded from server
    PERPLEXITY: '' // Will be loaded from server (backup only)
};

// AI Model Configuration - 10 Groq Models for Maximum Reliability
const AI_MODELS = [
    {
        name: 'llama-3.1-70b-versatile',
        provider: 'groq',
        model: 'llama-3.1-70b-versatile',
        priority: 1,
        description: 'Most capable model for complex medical reasoning'
    },
    {
        name: 'llama3-70b-8192',
        provider: 'groq',
        model: 'llama3-70b-8192',
        priority: 2,
        description: 'High-quality medical consultation model'
    },
    {
        name: 'llama-3.1-8b-instant',
        provider: 'groq',
        model: 'llama-3.1-8b-instant',
        priority: 3,
        description: 'Fast response model for quick interactions'
    },
    {
        name: 'mixtral-8x7b-32768',
        provider: 'groq',
        model: 'mixtral-8x7b-32768',
        priority: 4,
        description: 'Multilingual support for Indian languages'
    },
    {
        name: 'gemma-7b-it',
        provider: 'groq',
        model: 'gemma-7b-it',
        priority: 5,
        description: 'Instruction-tuned model for structured responses'
    },
    {
        name: 'llama3-8b-8192',
        provider: 'groq',
        model: 'llama3-8b-8192',
        priority: 6,
        description: 'Balanced performance and speed'
    },
    {
        name: 'gemma2-9b-it',
        provider: 'groq',
        model: 'gemma2-9b-it',
        priority: 7,
        description: 'Advanced instruction following'
    },
    {
        name: 'llama-3.2-1b-preview',
        provider: 'groq',
        model: 'llama-3.2-1b-preview',
        priority: 8,
        description: 'Lightweight model for basic interactions'
    },
    {
        name: 'llama-3.2-3b-preview',
        provider: 'groq',
        model: 'llama-3.2-3b-preview',
        priority: 9,
        description: 'Efficient model for standard queries'
    },
    {
        name: 'llama-guard-3-8b',
        provider: 'groq',
        model: 'llama-guard-3-8b',
        priority: 10,
        description: 'Safety-focused model for medical content'
    }
];

// Language Translations
const translations = {
    english: {
        welcome: "Namaste! I'm Dr. Arogya, your personal health companion. How can I help you today?",
        infoTitle: "Let me know you better",
        continueBtn: "Continue",
        reportBtn: "Generate Health Report",
        newConsultBtn: "New Consultation",
        disclaimer: "üîí Disclaimer: Dr. Arogya is not a licensed doctor. Always consult a healthcare professional for serious conditions.",
        loading: "Dr. Arogya is thinking...",
        emergency: "This may be an emergency. Please seek immediate medical help or go to the nearest hospital.",
        languageLabel: "Choose Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        namePlaceholder: "Your Name",
        agePlaceholder: "Age",
        cityPlaceholder: "City",
        genderSelect: "Select Gender",
        male: "Male",
        female: "Female",
        other: "Other",
        messagePlaceholder: "Type your message..."
    },
    hindi: {
        welcome: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§æ‡§•‡•Ä‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
        infoTitle: "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç",
        continueBtn: "‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç",
        reportBtn: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç",
        newConsultBtn: "‡§®‡§à ‡§∏‡§≤‡§æ‡§π",
        disclaimer: "üîí ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£: ‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§è‡§ï ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏‡•Ä ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
        loading: "‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•ã‡§ö ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
        emergency: "‡§Ø‡§π ‡§è‡§ï ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ú‡§æ‡§è‡§Ç‡•§",
        languageLabel: "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
        namePlaceholder: "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ",
        agePlaceholder: "‡§â‡§Æ‡•ç‡§∞",
        cityPlaceholder: "‡§∂‡§π‡§∞",
        genderSelect: "‡§≤‡§ø‡§Ç‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç",
        male: "‡§™‡•Å‡§∞‡•Å‡§∑",
        female: "‡§Æ‡§π‡§ø‡§≤‡§æ",
        other: "‡§Ö‡§®‡•ç‡§Ø",
        messagePlaceholder: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."
    },
    marathi: {
        welcome: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä ‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ü‡§π‡•á, ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§µ‡•à‡§Ø‡§ï‡•ç‡§§‡§ø‡§ï ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§æ‡§•‡•Ä‡•§ ‡§Ü‡§ú ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§ï‡§∂‡•Ä ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã?",
        infoTitle: "‡§Æ‡§≤‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§¶‡§≤ ‡§∏‡§æ‡§Ç‡§ó‡§æ",
        continueBtn: "‡§™‡•Å‡§¢‡•á ‡§ö‡§≤‡§æ",
        reportBtn: "‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ",
        newConsultBtn: "‡§®‡§µ‡•Ä‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ",
        disclaimer: "üîí ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£: ‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§π‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§ï ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§®‡§æ‡§π‡•Ä. ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§®‡•á‡§π‡§Æ‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï‡§æ‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ.",
        loading: "‡§°‡•â. ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á‡§§...",
        emergency: "‡§π‡•Ä ‡§Ü‡§™‡§§‡•ç‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡•Ä ‡§Ö‡§∏‡•Ç ‡§∂‡§ï‡§§‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§æ‡§§‡§°‡•Ä‡§®‡•á ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Æ‡§¶‡§§ ‡§ò‡•ç‡§Ø‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ú‡§µ‡§≥‡§ö‡•ç‡§Ø‡§æ ‡§∞‡•Å‡§ó‡•ç‡§£‡§æ‡§≤‡§Ø‡§æ‡§§ ‡§ú‡§æ.",
        languageLabel: "‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ:",
        namePlaceholder: "‡§§‡•Å‡§Æ‡§ö‡•á ‡§®‡§æ‡§µ",
        agePlaceholder: "‡§µ‡§Ø",
        cityPlaceholder: "‡§∂‡§π‡§∞",
        genderSelect: "‡§≤‡§ø‡§Ç‡§ó ‡§®‡§ø‡§µ‡§°‡§æ",
        male: "‡§™‡•Å‡§∞‡•Å‡§∑",
        female: "‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä",
        other: "‡§á‡§§‡§∞",
        messagePlaceholder: "‡§§‡•Å‡§Æ‡§ö‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§æ..."
    },
    kannada: {
        welcome: "‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å ‡≤°‡≤æ. ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≥à‡≤Ø‡≤ï‡≥ç‡≤§‡≤ø‡≤ï ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≤π‡≤ö‡≤∞. ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?",
        infoTitle: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤§‡≤ø‡≤≥‡≤ø‡≤∏‡≤ø",
        continueBtn: "‡≤Æ‡≥Å‡≤Ç‡≤¶‡≥Å‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø",
        reportBtn: "‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤µ‡≤∞‡≤¶‡≤ø ‡≤∞‡≤ö‡≤ø‡≤∏‡≤ø",
        newConsultBtn: "‡≤π‡≥ä‡≤∏ ‡≤∏‡≤≤‡≤π‡≥Ü",
        disclaimer: "üîí ‡≤π‡≤ï‡≥ç‡≤ï‡≥Å ‡≤®‡≤ø‡≤∞‡≤æ‡≤ï‡≤∞‡≤£‡≥Ü: ‡≤°‡≤æ. ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤™‡≤°‡≥Ü‡≤¶ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤≤‡≥ç‡≤≤. ‡≤ó‡≤Ç‡≤≠‡≥Ä‡≤∞ ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó‡≤≤‡≥Ç ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤µ‡≥É‡≤§‡≥ç‡≤§‡≤ø‡≤™‡≤∞‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø.",
        loading: "‡≤°‡≤æ. ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤Ø‡≥ã‡≤ö‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≤æ‡≤∞‡≥Ü...",
        emergency: "‡≤á‡≤¶‡≥Å ‡≤§‡≥Å‡≤∞‡≥ç‡≤§‡≥Å ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø‡≤∞‡≤¨‡≤π‡≥Å‡≤¶‡≥Å. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤§‡≤ï‡≥ç‡≤∑‡≤£ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤π‡≤§‡≥ç‡≤§‡≤ø‡≤∞‡≤¶ ‡≤Ü‡≤∏‡≥ç‡≤™‡≤§‡≥ç‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤π‡≥ã‡≤ó‡≤ø.",
        languageLabel: "‡≤≠‡≤æ‡≤∑‡≥Ü ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:",
        namePlaceholder: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å",
        agePlaceholder: "‡≤µ‡≤Ø‡≤∏‡≥ç‡≤∏‡≥Å",
        cityPlaceholder: "‡≤®‡≤ó‡≤∞",
        genderSelect: "‡≤≤‡≤ø‡≤Ç‡≤ó ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø",
        male: "‡≤™‡≥Å‡≤∞‡≥Å‡≤∑",
        female: "‡≤Æ‡≤π‡≤ø‡≤≥‡≥Ü",
        other: "‡≤á‡≤§‡≤∞‡≥Ü",
        messagePlaceholder: "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ü‡≥à‡≤™‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø..."
    }
};

// Emergency Keywords
const emergencyKeywords = [
    'chest pain', 'difficulty breathing', 'loss of consciousness', 'seizure', 'excessive bleeding',
    'heart attack', 'stroke', 'unconscious', 'severe pain', 'can\'t breathe',
    '‡§∏‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶', '‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§†‡§ø‡§®‡§æ‡§à', '‡§¨‡•á‡§π‡•ã‡§∂‡•Ä', '‡§¶‡•å‡§∞‡§æ', '‡§Ö‡§ß‡§ø‡§ï ‡§ñ‡•Ç‡§® ‡§¨‡§π‡§®‡§æ',
    '‡§õ‡§æ‡§§‡•Ä‡§§ ‡§¶‡•Å‡§ñ‡§£‡•á', '‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§°‡§ö‡§£', '‡§¨‡•á‡§∂‡•Å‡§¶‡•ç‡§ß‡•Ä', '‡§´‡§ø‡§ü', '‡§ú‡§æ‡§∏‡•ç‡§§ ‡§∞‡§ï‡•ç‡§§‡§∏‡•ç‡§∞‡§æ‡§µ',
    '‡≤é‡≤¶‡≥Ü ‡≤®‡≥ã‡≤µ‡≥Å', '‡≤â‡≤∏‡≤ø‡≤∞‡≤æ‡≤ü‡≤¶ ‡≤§‡≥ä‡≤Ç‡≤¶‡≤∞‡≥Ü', '‡≤™‡≥ç‡≤∞‡≤ú‡≥ç‡≤û‡≥Ü ‡≤ï‡≤≥‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≥Å‡≤µ‡≥Å‡≤¶‡≥Å', '‡≤∏‡≥Ü‡≤≥‡≥Ü‡≤§', '‡≤Ö‡≤ß‡≤ø‡≤ï ‡≤∞‡≤ï‡≥ç‡≤§‡≤∏‡≥ç‡≤∞‡≤æ‡≤µ'
];

// AI-Driven Questioning System (variables already declared above)

// Initialize App
document.addEventListener('DOMContentLoaded', function() {
    try {
        loadAPIKeys().then(() => {
            initializeApp();
        }).catch(error => {
            console.error('Error loading API keys:', error);
            initializeApp(); // Continue without API keys for basic functionality
        });
    } catch (error) {
        // Handle initialization errors silently in production
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            console.error('Error initializing Arogya AI:', error);
        }
        initializeApp(); // Continue with initialization
    }
});

// Load API keys from server
async function loadAPIKeys() {
    try {
        const response = await fetch('/api/keys');
        if (response.ok) {
            const keys = await response.json();
            API_KEYS.GROQ = keys.groq || '';
            API_KEYS.PERPLEXITY = keys.perplexity || '';
            
            if (API_KEYS.GROQ) {
                console.log('‚úÖ Groq API key loaded successfully');
            } else {
                console.warn('‚ö†Ô∏è Groq API key not found - AI features may not work');
            }
            
            if (API_KEYS.PERPLEXITY) {
                console.log('‚úÖ Perplexity API key loaded successfully');
            } else {
                console.warn('‚ö†Ô∏è Perplexity API key not found');
            }
        } else {
            console.warn('‚ö†Ô∏è Failed to load API keys from server');
        }
    } catch (error) {
        console.error('‚ùå Error loading API keys:', error);
        throw error;
    }
}

function initializeApp() {
    try {
        updateLanguageElements();
        showUserInfoSection();

        // Event listeners with error handling
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const languageSelect = document.getElementById('language');
        const reportModal = document.getElementById('reportPreviewModal');

        if (messageInput) {
            messageInput.addEventListener('keypress', handleKeyPress);
        }

        if (sendButton) {
            sendButton.addEventListener('click', sendMessage);
        }

        if (languageSelect) {
            languageSelect.addEventListener('change', changeLanguage);
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', handleKeyboardShortcuts);

        // Add click outside modal to close
        if (reportModal) {
            reportModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeReportPreview();
                }
            });
        }
    } catch (error) {
        // Handle errors silently in production
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            console.error('Error in initializeApp:', error);
        }
    }
}

function handleKeyboardShortcuts(event) {
    // Close modal with Escape key
    if (event.key === 'Escape') {
        const modal = document.getElementById('reportPreviewModal');
        if (modal && modal.style.display === 'flex') {
            closeReportPreview();
        }
    }
}

function updateLanguageElements() {
    try {
        const lang = translations[currentLanguage];
        if (!lang) {
            return;
        }

        // Update text elements
        const elements = [
            { id: 'welcomeMessage', property: 'textContent', value: lang.welcome },
            { id: 'infoTitle', property: 'textContent', value: lang.infoTitle },
            { id: 'continueBtn', property: 'textContent', value: lang.continueBtn },
            { id: 'reportBtnText', property: 'textContent', value: lang.reportBtn },
            { id: 'newConsultBtnText', property: 'textContent', value: lang.newConsultBtn },
            { id: 'disclaimerText', property: 'innerHTML', value: lang.disclaimer },
            { id: 'loadingText', property: 'textContent', value: lang.loading },
            { id: 'emergencyText', property: 'textContent', value: lang.emergency },
            { id: 'languageLabel', property: 'textContent', value: lang.languageLabel }
        ];

        elements.forEach(({ id, property, value }) => {
            const element = document.getElementById(id);
            if (element) {
                element[property] = value;
            }
        });

        // Update placeholders
        const placeholders = [
            { id: 'userName', value: lang.namePlaceholder },
            { id: 'userAge', value: lang.agePlaceholder },
            { id: 'userCity', value: lang.cityPlaceholder },
            { id: 'messageInput', value: lang.messagePlaceholder }
        ];

        placeholders.forEach(({ id, value }) => {
            const element = document.getElementById(id);
            if (element) {
                element.placeholder = value;
            }
        });

        // Update gender options
        const genderSelect = document.getElementById('userGender');
        if (genderSelect) {
            genderSelect.innerHTML = `
                <option value="">${lang.genderSelect}</option>
                <option value="male">${lang.male}</option>
                <option value="female">${lang.female}</option>
                <option value="other">${lang.other}</option>
            `;
        }
    } catch (error) {
        // Handle errors silently in production
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            console.error('Error updating language elements:', error);
        }
    }
}

function changeLanguage() {
    currentLanguage = document.getElementById('language').value;
    updateLanguageElements();
}

function showUserInfoSection() {
    const userInfoSection = document.getElementById('userInfoSection');
    if (userInfoSection) {
        userInfoSection.style.display = 'block';
        consultationPhase = 'info_collection';
    }
}

function saveUserInfo() {
    const name = document.getElementById('userName').value.trim();
    const age = document.getElementById('userAge').value;
    const gender = document.getElementById('userGender').value;
    const city = document.getElementById('userCity').value.trim();

    if (!name || !age || !gender || !city) {
        alert('Please fill in all fields');
        return;
    }

    userInfo = { name, age, gender, city };
    document.getElementById('userInfoSection').style.display = 'none';

    // Start symptom collection phase
    startSymptomCollection();
}

function startSymptomCollection() {
    questionCount = 0;
    questionsAsked = 0;
    isDataCollectionComplete = false;
    consultationPhase = 'symptom_collection';

    // Start with structured introduction
    const introMessage = currentLanguage === 'hindi' ?
        `‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ${userInfo.name}‡•§ ‡§Æ‡•à‡§Ç‡§®‡•á ‡§®‡•ã‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ü‡§™ ${userInfo.city} ‡§ï‡•á ${userInfo.age} ‡§µ‡§∞‡•ç‡§∑‡•Ä‡§Ø ${userInfo.gender === 'male' ? '‡§™‡•Å‡§∞‡•Å‡§∑' : '‡§Æ‡§π‡§ø‡§≤‡§æ'} ‡§π‡•à‡§Ç‡•§

‡§Ü‡§ú ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•ã ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à:
- ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§ï‡§¨ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§è?
- ‡§µ‡•á ‡§ï‡§ø‡§§‡§®‡•á ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§π‡•à‡§Ç?
- ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞ ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§Ü‡§™‡§®‡•á ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à?
- ‡§ï‡•ã‡§à ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡§æ‡§Ç?

‡§Ø‡§π ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨‡§∏‡•á ‡§∏‡§ü‡•Ä‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§ó‡§æ‡•§` :
        currentLanguage === 'marathi' ?
        `‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ${userInfo.name}‡•§ ‡§Æ‡•Ä ‡§®‡•ã‡§Ç‡§¶‡§µ‡§≤‡•á ‡§Ü‡§π‡•á ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ${userInfo.city} ‡§ö‡•á ${userInfo.age} ‡§µ‡§∞‡•ç‡§∑‡•Ä‡§Ø ${userInfo.gender === 'male' ? '‡§™‡•Å‡§∞‡•Å‡§∑' : '‡§Æ‡§π‡§ø‡§≤‡§æ'} ‡§Ü‡§π‡§æ‡§§‡•§

‡§Ü‡§ú ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§Æ‡•ç‡§π‡§£‡•Ç‡§®, ‡§Æ‡§≤‡§æ ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§∏‡§Æ‡§ú‡•Ç‡§® ‡§ò‡•á‡§£‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ü‡§π‡•á‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§æ‡§Ø ‡§§‡•ç‡§∞‡§æ‡§∏ ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á, ‡§ú‡•ç‡§Ø‡§æ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•á ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§Ü‡§π‡•á:
- ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§ï‡§ß‡•Ä ‡§∏‡•Å‡§∞‡•Ç ‡§ù‡§æ‡§≤‡•Ä?
- ‡§§‡•Ä ‡§ï‡§ø‡§§‡•Ä ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§Ü‡§π‡•á‡§§?
- ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§æ‡§§ ‡§ò‡•á‡§§‡§≤‡•á‡§≤‡•á ‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞?
- ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ‡§π‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡•Ä?

‡§π‡•á ‡§Æ‡§≤‡§æ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§∏‡§∞‡•ç‡§µ‡§æ‡§§ ‡§Ö‡§ö‡•Ç‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡•á‡§≤‡•§` :
        currentLanguage === 'kannada' ?
        `‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å ${userInfo.name}‡•§ ‡≤®‡≥Ä‡≤µ‡≥Å ${userInfo.city} ‡≤® ${userInfo.age} ‡≤µ‡≤∞‡≥ç‡≤∑‡≤¶ ${userInfo.gender === 'male' ? '‡≤™‡≥Å‡≤∞‡≥Å‡≤∑' : '‡≤Æ‡≤π‡≤ø‡≤≥‡≥Ü'} ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤ó‡≤Æ‡≤®‡≤ø‡≤∏‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü‡•§

‡≤á‡≤Ç‡≤¶‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≥á‡≤µ‡≤æ ‡≤™‡≥Ç‡≤∞‡≥à‡≤ï‡≥Ü‡≤¶‡≤æ‡≤∞‡≤®‡≤æ‡≤ó‡≤ø, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤¨‡≥á‡≤ï‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü‡•§ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ‡≤®‡≥ç‡≤®‡≥Å ‡≤è‡≤®‡≥Å ‡≤§‡≥ä‡≤Ç‡≤¶‡≤∞‡≥Ü‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¨‡≥Å‡≤¶‡≤®‡≥ç‡≤®‡≥Å ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø, ‡≤á‡≤¶‡≤∞‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≥á‡≤∞‡≤ø‡≤¶‡≥Ü:
- ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≥Å ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤µ‡≤æ‡≤¶‡≤µ‡≥Å?
- ‡≤Ö‡≤µ‡≥Å ‡≤é‡≤∑‡≥ç‡≤ü‡≥Å ‡≤§‡≥Ä‡≤µ‡≥ç‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø‡≤µ‡≥Ü?
- ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤ó‡≤Æ‡≤®‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤®‡≤ø‡≤∞‡≥ç‡≤¶‡≤ø‡≤∑‡≥ç‡≤ü ‡≤™‡≥ç‡≤∞‡≤ö‡≥ã‡≤¶‡≤ï‡≤ó‡≤≥‡≥Å?
- ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤π‡≤ø‡≤Ç‡≤¶‡≤ø‡≤® ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≥Å?

‡≤á‡≤¶‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤Ö‡≤§‡≥ç‡≤Ø‡≤Ç‡≤§ ‡≤®‡≤ø‡≤ñ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤Æ‡≤æ‡≤™‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤í‡≤¶‡≤ó‡≤ø‡≤∏‡≤≤‡≥Å ‡≤®‡≤®‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü‡•§` :
        `Thank you ${userInfo.name}. I've noted that you're a ${userInfo.age}-year-old ${userInfo.gender} from ${userInfo.city}.

As your health care provider today, I'll need to understand your symptoms in detail. Please describe what's bothering you, including:
- When did your symptoms start?
- How severe are they?
- Any specific triggers you've noticed?
- Any previous medical conditions?

This will help me provide you with the most accurate assessment.`;

    addMessage(introMessage, 'ai');
}

// Multi-Model AI Wrapper Function - Groq Only with 10 Fallback Models
async function callAIModel(prompt, systemPrompt, isQuestion = false) {
    // Check if Groq API key is available
    if (!API_KEYS.GROQ) {
        console.error('‚ùå No Groq API key available');
        return getFallbackResponse(isQuestion);
    }

    currentModelIndex = 0; // Reset to primary model

    for (let i = 0; i < AI_MODELS.length; i++) {
        const model = AI_MODELS[currentModelIndex];
        console.log(`ü§ñ Trying model ${model.name} (${i + 1}/${AI_MODELS.length})...`);

        try {
            const response = await callGroqAPI(prompt, systemPrompt, model.model);

            if (response && response.trim()) {
                console.log(`‚úÖ Success with model: ${model.name}`);
                return response;
            } else {
                console.warn(`‚ö†Ô∏è Empty response from model: ${model.name}`);
            }

        } catch (error) {
            console.warn(`‚ö†Ô∏è Model ${model.name} failed:`, error.message);
            
            // If it's a rate limit error, wait longer
            if (error.message.includes('429') || error.message.includes('rate limit')) {
                console.log('‚è≥ Rate limit detected, waiting 2 seconds...');
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }

        // Move to next model
        currentModelIndex = (currentModelIndex + 1) % AI_MODELS.length;

        // Add progressive delay between attempts
        if (i < AI_MODELS.length - 1) {
            const delay = Math.min(1000 * (i + 1), 3000); // Max 3 second delay
            console.log(`‚è≥ Waiting ${delay}ms before trying next model...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    // All models failed
    console.error('‚ùå All Groq models failed, using fallback response');
    return getFallbackResponse(isQuestion);
}

async function askAIQuestion() {
    // Check if we should move to recommendation phase
    if (questionsAsked >= maxQuestions || (questionsAsked >= minQuestions && isDataCollectionComplete)) {
        moveToRecommendationPhase();
        return;
    }

    // Generate AI question based on conversation history
    const questionPrompt = createQuestionPrompt();
    const systemPrompt = createQuestionSystemPrompt();

    try {
        showLoading(true);
        console.log(`ü§î Generating AI question (${questionsAsked + 1}/${maxQuestions})...`);
        
        const aiResponse = await callAIModel(questionPrompt, systemPrompt, true);

        // Check if AI indicates data collection is complete
        if (questionsAsked >= minQuestions && aiResponse.toLowerCase().includes('enough information')) {
            console.log('‚úÖ AI indicates data collection is complete');
            isDataCollectionComplete = true;
            moveToRecommendationPhase();
            return;
        }

        setTimeout(() => {
            addMessage(aiResponse, 'ai');
            storeAIQuestion(aiResponse);
            questionsAsked++;
            showLoading(false);
            console.log(`‚úÖ AI question ${questionsAsked} generated successfully`);
        }, 500);

    } catch (error) {
        console.error('‚ùå Error generating AI question:', error);
        showLoading(false);

        // Fallback to basic question
        const fallbackQuestion = getFallbackQuestion();
        addMessage(fallbackQuestion, 'ai');
        storeAIQuestion(fallbackQuestion);
        questionsAsked++;
        console.log('üîÑ Used fallback question due to AI error');
    }
}

function moveToRecommendationPhase() {

    consultationPhase = 'recommendation';

    const processingMessage = currentLanguage === 'hindi' ?
        `‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ${userInfo.name}! ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...` :
        currentLanguage === 'marathi' ?
        `‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ${userInfo.name}! ‡§Ü‡§§‡§æ ‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á...` :
        currentLanguage === 'kannada' ?
        `‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å ${userInfo.name}! ‡≤à‡≤ó ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Æ‡≤æ‡≤π‡≤ø‡≤§‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü...` :
        `Thank you ${userInfo.name}! Now I'm analyzing your information...`;

    addMessage(processingMessage, 'ai');

    setTimeout(() => {
        generateRecommendation();
    }, 2000);
}

function getFallbackQuestion() {
    const fallbackQuestions = {
        english: `${userInfo.name}, could you tell me more about how you're feeling?`,
        hindi: `${userInfo.name}, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?`,
        marathi: `${userInfo.name}, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡§∏‡•á ‡§µ‡§æ‡§ü‡§§ ‡§Ü‡§π‡§æ‡§§?`,
        kannada: `${userInfo.name}, ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤Ö‡≤®‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤π‡≥á‡≤≥‡≤ø?`
    };
    return fallbackQuestions[currentLanguage] || fallbackQuestions.english;
}

function handleKeyPress(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

async function sendMessage() {
    const input = document.getElementById('messageInput');
    const message = input.value.trim();

    if (!message) return;

    // Check for emergency
    if (checkEmergency(message)) {
        showEmergencyAlert();
        return;
    }

    addMessage(message, 'user');
    input.value = '';

    // Handle different consultation phases
    if (consultationPhase === 'symptom_collection') {
        storeSymptomAnswer(message);
        questionCount++;

        // Small delay before next question
        setTimeout(() => {
            askAIQuestion();
        }, 1000);

    } else if (consultationPhase === 'pdf_question') {
        const lowerMessage = message.toLowerCase();
        const isYes = lowerMessage.includes('yes') || lowerMessage.includes('‡§π‡§æ‡§Å') ||
                     lowerMessage.includes('‡§π‡•ã‡§Ø') || lowerMessage.includes('‡≤π‡≥å‡≤¶‡≥Å') ||
                     lowerMessage.includes('y') || lowerMessage.includes('‡§π‡§æ');

        if (isYes) {
            // Generate PDF report
            setTimeout(() => {
                generateReport();
            }, 500);
        } else {
            // Show action buttons for new consultation
            const thankYouMessage = currentLanguage === 'hindi' ?
                "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§à ‡§∏‡§≤‡§æ‡§π ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç‡•§" :
                currentLanguage === 'marathi' ?
                "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§Ü‡§£‡§ñ‡•Ä ‡§ï‡§æ‡§π‡•Ä ‡§Æ‡§¶‡§§ ‡§π‡§µ‡•Ä ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§µ‡•Ä‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§æ." :
                currentLanguage === 'kannada' ?
                "‡≤ß‡≤®‡≥ç‡≤Ø‡≤µ‡≤æ‡≤¶‡≤ó‡≤≥‡≥Å! ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤¨‡≥á‡≤ï‡≤æ‡≤¶‡≤∞‡≥Ü ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤π‡≥ä‡≤∏ ‡≤∏‡≤≤‡≤π‡≥Ü ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø." :
                "Thank you! If you need any more assistance, please start a new consultation.";

            addMessage(thankYouMessage, 'ai');
            document.getElementById('actionButtons').style.display = 'flex';
        }
        consultationPhase = 'completed';
    }
}

function storeSymptomAnswer(answer) {
    const questionKey = `question_${questionCount}`;
    collectedSymptoms[questionKey] = answer;

    // Store with the last AI question
    if (conversationHistory.length > 0) {
        const lastEntry = conversationHistory[conversationHistory.length - 1];
        if (!lastEntry.answer) {
            lastEntry.answer = answer;
        } else {
            conversationHistory.push({
                question: "Follow-up response",
                answer: answer
            });
        }
    } else {
        conversationHistory.push({
            question: "Initial response",
            answer: answer
        });
    }

    questionCount++;
}

// Create AI question prompt based on conversation history
function createQuestionPrompt() {
    let prompt = `Patient Information:
Name: ${userInfo.name}
Age: ${userInfo.age}
Gender: ${userInfo.gender}
City: ${userInfo.city}

Conversation History:
`;

    conversationHistory.forEach((item, index) => {
        prompt += `Q${index + 1}: ${item.question}\nA${index + 1}: ${item.answer}\n\n`;
    });

    prompt += `
Based on the conversation so far, generate the next logical follow-up question to understand the patient's health condition better.

Guidelines:
- Ask only ONE question at a time
- Keep it conversational and empathetic
- Focus on understanding symptoms, duration, severity, triggers, or related health information
- Avoid repetitive questions
- If you have enough information for a preliminary assessment, indicate that you're ready to provide guidance
- Respond in ${currentLanguage}

Generate the next question:`;

    return prompt;
}

// Create system prompt for AI questioning
function createQuestionSystemPrompt() {
    return `üîÅ PHASE 1: SYMPTOM COLLECTION & FOLLOW-UP

You are Dr. Arogya, a compassionate AI health assistant. You are currently in the symptom collection phase.

Your job is to ask follow-up questions ONLY. Do not give advice or recommendations at this stage.

CONVERSATION STYLE EXAMPLES:
- "Sorry to hear that you're not feeling well. ü§ï"
- "Let's try to understand your symptoms better. Can you please tell me more about your headache? Is it a dull ache or a sharp pain? Is it located on one side of your head or all over?"
- "So you've had a dull headache for 3 days. That can be really uncomfortable. ü§ï"
- "That's a good detail to know."
- "That's great to hear! Having a good daily routine can really help in maintaining overall health and well-being."

STRICT RULES FOR PHASE 1:
- Don't give suggestions or advice
- Don't say "Based on your symptoms..."
- Use empathetic responses like "Sorry to hear that" or "That can be really uncomfortable"
- Ask 1-2 focused questions at a time
- Use emojis sparingly (ü§ï for sympathy)
- Acknowledge their answers before asking next question
- Respond ONLY in ${currentLanguage === 'english' ? 'English' : currentLanguage === 'hindi' ? 'Hindi' : currentLanguage === 'marathi' ? 'Marathi' : 'Kannada'}

If you have collected enough information after ${minQuestions} questions, you can respond with "I think I've got enough information" to proceed to recommendations.

Focus on gathering:
- Symptom details (what, when, how long, severity)
- Associated symptoms (fever, body ache, etc.)
- Daily routine and lifestyle factors
- Medical history and current medications
- Triggers or patterns`;
}

function checkEmergency(message) {
    const lowerMessage = message.toLowerCase();
    return emergencyKeywords.some(keyword => lowerMessage.includes(keyword.toLowerCase()));
}

function showEmergencyAlert() {
    document.getElementById('emergencyAlert').style.display = 'block';
    setTimeout(() => {
        document.getElementById('emergencyAlert').style.display = 'none';
    }, 10000);
}

function addMessage(text, sender) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;

    messageDiv.innerHTML = `
        <div class="message-avatar">
            <i class="fas ${sender === 'ai' ? 'fa-user-md' : 'fa-user'}"></i>
        </div>
        <div class="message-content">
            <p>${text}</p>
        </div>
    `;

    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Individual API call functions
async function callGroqAPI(prompt, systemPrompt, model) {
    if (!API_KEYS.GROQ) {
        throw new Error('Groq API key not available');
    }

    try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${API_KEYS.GROQ}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: model,
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: 0.7,
                max_tokens: 1500,
                top_p: 1,
                stream: false
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            let errorMessage = `Groq API error: ${response.status}`;
            
            try {
                const errorData = JSON.parse(errorText);
                if (errorData.error && errorData.error.message) {
                    errorMessage += ` - ${errorData.error.message}`;
                }
            } catch (e) {
                // If we can't parse the error, use the status text
                errorMessage += ` - ${response.statusText}`;
            }
            
            throw new Error(errorMessage);
        }

        const data = await response.json();

        if (data && data.choices && Array.isArray(data.choices) && data.choices.length > 0 && data.choices[0].message) {
            const content = data.choices[0].message.content;
            if (content && content.trim()) {
                return content.trim();
            } else {
                throw new Error('Empty response content from Groq API');
            }
        } else {
            throw new Error('Invalid response format from Groq API');
        }
    } catch (error) {
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            throw new Error('Network error: Unable to connect to Groq API');
        }
        throw error;
    }
}

// Gemini API removed - using Groq only for better reliability

function getFallbackResponse(isQuestion = false) {
    console.log('üîÑ Using fallback response due to API issues');
    
    if (isQuestion) {
        const fallbackQuestions = {
            english: "I'm having trouble connecting to my AI services right now. Can you tell me more about how you're feeling? Please describe your symptoms in detail.",
            hindi: "‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§Ö‡§™‡§®‡•Ä AI ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•à‡§∏‡§æ ‡§Æ‡§π‡§∏‡•Ç‡§∏ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç? ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
            marathi: "‡§Æ‡§≤‡§æ ‡§∏‡§ß‡•ç‡§Ø‡§æ ‡§Æ‡§æ‡§ù‡•ç‡§Ø‡§æ AI ‡§∏‡•á‡§µ‡§æ‡§Ç‡§∂‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§£‡•ç‡§Ø‡§æ‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ø‡•á‡§§ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§æ‡§Ç‡§ó‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡§∏‡•á ‡§µ‡§æ‡§ü‡§§ ‡§Ü‡§π‡§æ‡§§? ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•á ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡§æ.",
            kannada: "‡≤®‡≤®‡≤ó‡≥Ü ‡≤à‡≤ó ‡≤®‡≤®‡≥ç‡≤® AI ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï ‡≤∏‡≤æ‡≤ß‡≤ø‡≤∏‡≤≤‡≥Å ‡≤§‡≥ä‡≤Ç‡≤¶‡≤∞‡≥Ü‡≤Ø‡≤æ‡≤ó‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤Ö‡≤®‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤π‡≥á‡≤≥‡≤ø? ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤ó‡≤ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤ø‡≤∏‡≤ø."
        };
        return fallbackQuestions[currentLanguage] || fallbackQuestions.english;
    } else {
        return getFallbackGuidance();
    }
}

async function generateRecommendation() {
    showLoading(true);

    try {
        const recommendation = await getAIRecommendation();
        aiGuidanceResponse = recommendation; // Store for report generation
        addMessage(recommendation, 'ai');

        // Ask if user wants PDF report
        setTimeout(() => {
            const pdfQuestion = currentLanguage === 'hindi' ?
                `${userInfo.name}, ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§è‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)` :
                currentLanguage === 'marathi' ?
                `${userInfo.name}, ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§§‡§™‡§∂‡•Ä‡§≤‡§µ‡§æ‡§∞ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§π‡§µ‡§æ ‡§Ü‡§π‡•á ‡§ï‡§æ? (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)` :
                currentLanguage === 'kannada' ?
                `${userInfo.name}, ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤µ‡≤ø‡≤µ‡≤∞‡≤µ‡≤æ‡≤¶ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤µ‡≤∞‡≤¶‡≤ø ‡≤¨‡≥á‡≤ï‡≥á? (‡≤π‡≥å‡≤¶‡≥Å/‡≤á‡≤≤‡≥ç‡≤≤)` :
                `${userInfo.name}, would you like me to generate a detailed health report for you? (Yes/No)`;

            addMessage(pdfQuestion, 'ai');
            consultationPhase = 'pdf_question';
        }, 2000);

    } catch (error) {
        console.error('Error generating recommendation:', error);
        const errorMessage = 'I\'m facing technical issues. Please try again shortly.';
        addMessage(errorMessage, 'ai');
    } finally {
        showLoading(false);
    }
}

async function getAIRecommendation() {
    const prompt = createRecommendationPrompt();
    const systemPrompt = createRecommendationSystemPrompt();

    try {
        return await callAIModel(prompt, systemPrompt, false);
    } catch (error) {
        console.error('Error getting AI recommendation:', error);
        return getFallbackRecommendation();
    }
}

function createRecommendationSystemPrompt() {
    return `‚úÖ PHASE 2: COMPLETE RECOMMENDATION PHASE

You are Dr. Arogya, a culturally-aware, compassionate AI health assistant for Indian users following WHO, ICMR, MoHFW, and CDC guidelines.

Now that you've gathered enough symptom information, begin generating structured guidance. This is not a diagnosis.

IMPORTANT: Respond ONLY in ${currentLanguage === 'english' ? 'English' : currentLanguage === 'hindi' ? 'Hindi' : currentLanguage === 'marathi' ? 'Marathi' : 'Kannada'}. Do not mix languages.

EXACT FORMAT TO FOLLOW:

Start with: "I think I've got a good understanding of your symptoms now. Let me summarize everything to make sure I've got it right."

üßæ Symptom Summary
[Summarize what the user described in 2-3 lines]

Let me provide some guidance based on your symptoms.

üß† Clinical Assessment
This might be related to [condition], but it's not a medical diagnosis.

üßò Lifestyle Guidance
Try to rest, hydrate, and monitor your symptoms. [Add specific advice]

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (Traditional Remedies)
You can try these traditional remedies:
1. [First traditional remedy with detailed usage instructions]
2. [Second traditional remedy with detailed usage instructions]

üìÖ Medical Recommendations
If your symptoms worsen or last beyond [timeframe], please consult a certified doctor for further evaluation and guidance.

üîí Medical Disclaimer
This is not a replacement for a licensed medical opinion. Always consult a real doctor for serious or persistent conditions.

Please let me know if you have any further questions or concerns!

DO NOT use ** or * formatting. Use clean section headers with emojis only.
Be warm, empathetic, and culturally sensitive.

IMPORTANT: Always include MINIMUM 2 traditional remedies in the "üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á" section with detailed usage instructions.`;
}

// Store AI question in conversation history
function storeAIQuestion(question) {
    conversationHistory.push({
        question: question,
        answer: null // Will be filled when user responds
    });
}

function createRecommendationPrompt() {
    let prompt = `Patient Information:
Name: ${userInfo.name}
Age: ${userInfo.age}
Gender: ${userInfo.gender}
City: ${userInfo.city}

Detailed Consultation History:
`;

    conversationHistory.forEach((item, index) => {
        if (item.answer) {
            prompt += `Q${index + 1}: ${item.question}\nA${index + 1}: ${item.answer}\n\n`;
        }
    });

    prompt += `
Based on this detailed consultation, provide structured health recommendations following the exact format specified.

Consider the patient's:
- Reported symptoms and their characteristics
- Duration and severity of symptoms
- Associated factors and triggers
- Medical history and current medications
- Age, gender, and location for cultural context

Provide practical, culturally appropriate advice including traditional Indian remedies that are safe and commonly used.

Remember: This is preliminary guidance only, not a medical diagnosis.`;

    return prompt;
}

function getFallbackRecommendation() {
    console.log('Using fallback recommendation due to API failure');

    const fallbacks = {
        english: `I think I've got a good understanding of your symptoms now. Let me summarize everything to make sure I've got it right.

üßæ Symptom Summary
Based on what you've shared, I understand you're experiencing some health concerns that are affecting your daily life.

Let me provide some guidance based on your symptoms.

üß† Clinical Assessment
This might be related to common conditions like stress, fatigue, or minor infections, but it's not a medical diagnosis.

üßò Lifestyle Guidance
Try to rest, hydrate, and monitor your symptoms. Get adequate sleep and eat light, nutritious meals.

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (Traditional Remedies)
1. Ginger tea with honey: Boil fresh ginger in water for 5 minutes, strain, and add honey when warm. Drink 2-3 times daily.
2. Turmeric milk: Add a pinch of turmeric to warm milk before bed. This helps with inflammation and promotes better sleep.

üìÖ Medical Recommendations
If your symptoms worsen or last beyond 2-3 days, please consult a certified doctor for further evaluation and guidance.

üîí Medical Disclaimer
This is not a replacement for a licensed medical opinion. Always consult a real doctor for serious or persistent conditions.

Please let me know if you have any further questions or concerns!`,

        hindi: `‡§Æ‡•Å‡§ù‡•á ‡§≤‡§ó‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§Ö‡§¨ ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§∏‡§Æ‡§ù ‡§Æ‡§ø‡§≤ ‡§ó‡§à ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡•á‡§™ ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§π‡•ã ‡§∏‡§ï‡•á ‡§ï‡§ø ‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡§π‡•Ä ‡§∏‡§Æ‡§ù‡§æ ‡§π‡•à‡•§

üßæ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂
‡§Ü‡§™‡§®‡•á ‡§ú‡•ã ‡§¨‡§§‡§æ‡§Ø‡§æ ‡§π‡•à, ‡§â‡§∏‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•Å‡§õ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç‡•§

‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§Ç ‡§ï‡•Å‡§õ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§

üß† ‡§®‡•à‡§¶‡§æ‡§®‡§ø‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®
‡§Ø‡§π ‡§§‡§®‡§æ‡§µ, ‡§•‡§ï‡§æ‡§®, ‡§Ø‡§æ ‡§Æ‡§æ‡§Æ‡•Ç‡§≤‡•Ä ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§

üßò ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®
‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡§®‡•á ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§π‡§≤‡•ç‡§ï‡§æ, ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§≠‡•ã‡§ú‡§® ‡§ï‡§∞‡•á‡§Ç‡•§

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§â‡§™‡§ö‡§æ‡§∞)
1. ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡•Ä ‡§ö‡§æ‡§Ø ‡§∂‡§π‡§¶ ‡§ï‡•á ‡§∏‡§æ‡§•: ‡§§‡§æ‡§ú‡§æ ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡•ã 5 ‡§Æ‡§ø‡§®‡§ü ‡§§‡§ï ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§¨‡§æ‡§≤‡•á‡§Ç, ‡§õ‡§æ‡§® ‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§ó‡§∞‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∂‡§π‡§¶ ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Ç‡•§ ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç 2-3 ‡§¨‡§æ‡§∞ ‡§™‡§ø‡§è‡§Ç‡•§
2. ‡§π‡§≤‡•ç‡§¶‡•Ä ‡§¶‡•Ç‡§ß: ‡§∏‡•ã‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ó‡§∞‡•ç‡§Æ ‡§¶‡•Ç‡§ß ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Ä ‡§π‡§≤‡•ç‡§¶‡•Ä ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Ç‡•§ ‡§Ø‡§π ‡§∏‡•Ç‡§ú‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§¨‡•á‡§π‡§§‡§∞ ‡§®‡•Ä‡§Ç‡§¶ ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§

üìÖ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç
‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ 2-3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡§ø‡§ó‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡§®‡•á ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§ó‡•á ‡§ï‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§

üîí ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£
‡§Ø‡§π ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∞‡§æ‡§Ø ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§Ø‡§æ ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Ø‡§æ ‡§ö‡§ø‡§Ç‡§§‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç!`,

        marathi: `‡§Æ‡§≤‡§æ ‡§µ‡§æ‡§ü‡§§‡•á ‡§ï‡•Ä ‡§Ü‡§§‡§æ ‡§Æ‡§≤‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•Ä ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•Ä ‡§∏‡§Æ‡§ú ‡§Æ‡§ø‡§≥‡§æ‡§≤‡•Ä ‡§Ü‡§π‡•á. ‡§Æ‡•Ä ‡§∏‡§∞‡•ç‡§µ‡§ï‡§æ‡§π‡•Ä ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂‡§ø‡§§ ‡§ï‡§∞‡§§‡•ã ‡§Ø‡§æ‡§ö‡•Ä ‡§ñ‡§æ‡§§‡•ç‡§∞‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§ï‡•Ä ‡§Æ‡§≤‡§æ ‡§§‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§Æ‡§ú‡§≤‡•á ‡§Ü‡§π‡•á.

üßæ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂
‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ú‡•á ‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡•á ‡§§‡•ç‡§Ø‡§æ‡§µ‡§∞‡•Ç‡§® ‡§Æ‡§≤‡§æ ‡§∏‡§Æ‡§ú‡§§‡•á ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§æ‡§π‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á‡§§‡•§

‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§ß‡§æ‡§∞‡•á ‡§Æ‡•Ä ‡§ï‡§æ‡§π‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§¶‡•á‡§§‡•ã.

üß† ‡§®‡•à‡§¶‡§æ‡§®‡§ø‡§ï ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®
‡§π‡•á ‡§§‡§£‡§æ‡§µ, ‡§•‡§ï‡§µ‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ï‡§ø‡§∞‡§ï‡•ã‡§≥ ‡§∏‡§Ç‡§∏‡§∞‡•ç‡§ó‡§æ‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Ö‡§∏‡•Ç ‡§∂‡§ï‡§§‡•á, ‡§™‡§∞‡§Ç‡§§‡•Å ‡§π‡•á ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§æ‡§π‡•Ä‡•§

üßò ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®
‡§µ‡§ø‡§∂‡•ç‡§∞‡§æ‡§Ç‡§§‡•Ä ‡§ò‡•á‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ, ‡§π‡§æ‡§Ø‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§æ‡§π‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§Ü‡§£‡§ø ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§µ‡§∞ ‡§≤‡§ï‡•ç‡§∑ ‡§†‡•á‡§µ‡§£‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ‡•§ ‡§™‡•Å‡§∞‡•á‡§∂‡•Ä ‡§ù‡•ã‡§™ ‡§ò‡•ç‡§Ø‡§æ ‡§Ü‡§£‡§ø ‡§π‡§≤‡§ï‡•á, ‡§™‡•å‡§∑‡•ç‡§ü‡§ø‡§ï ‡§ú‡•á‡§µ‡§£ ‡§ï‡§∞‡§æ‡•§

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (‡§™‡§æ‡§∞‡§Ç‡§™‡§æ‡§∞‡§ø‡§ï ‡§â‡§™‡§ö‡§æ‡§∞)
1. ‡§Ü‡§≤‡•á ‡§ö‡§π‡§æ ‡§Æ‡§ß‡§æ‡§∏‡§π: ‡§§‡§æ‡§ú‡•á ‡§Ü‡§≤‡•á 5 ‡§Æ‡§ø‡§®‡§ø‡§ü‡•á ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§â‡§ï‡§≥‡§µ‡§æ, ‡§ó‡§æ‡§≥‡•Ç‡§® ‡§ò‡•ç‡§Ø‡§æ ‡§Ü‡§£‡§ø ‡§ó‡§∞‡§Æ ‡§Ö‡§∏‡§§‡§æ‡§®‡§æ ‡§Æ‡§ß ‡§ò‡§æ‡§≤‡§æ. ‡§¶‡§ø‡§µ‡§∏‡§æ‡§§‡•Ç‡§® 2-3 ‡§µ‡•á‡§≥‡§æ ‡§™‡•ç‡§Ø‡§æ.
2. ‡§π‡§≥‡§¶ ‡§¶‡•Ç‡§ß: ‡§ù‡•ã‡§™‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§ó‡§∞‡§Æ ‡§¶‡•Å‡§ß‡§æ‡§§ ‡§ö‡§ø‡§Æ‡•Ç‡§ü‡§≠‡§∞ ‡§π‡§≥‡§¶ ‡§ò‡§æ‡§≤‡§æ. ‡§π‡•á ‡§ú‡§≥‡§ú‡§≥ ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡§¶‡§§ ‡§ï‡§∞‡§§‡•á ‡§Ü‡§£‡§ø ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•Ä ‡§ù‡•ã‡§™ ‡§Ø‡•á‡§§‡•á.

üìÖ ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä
‡§ú‡§∞ ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á 2-3 ‡§¶‡§ø‡§µ‡§∏‡§æ‡§Ç‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§µ‡§æ‡§¢‡§≤‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∞‡§æ‡§π‡§ø‡§≤‡•Ä ‡§§‡§∞ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§¢‡•Ä‡§≤ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§Ü‡§£‡§ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®‡§æ‡§∏‡§æ‡§†‡•Ä ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ‡•§

üîí ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£
‡§π‡•á ‡§™‡§∞‡§µ‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§ï ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Æ‡§§‡§æ‡§ö‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø ‡§®‡§æ‡§π‡•Ä‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∏‡§§‡§§ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§®‡•á‡§π‡§Æ‡•Ä ‡§ñ‡§±‡•ç‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ‡•§

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡§≤‡§æ ‡§ï‡§≥‡§µ‡§æ ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡§ö‡•á ‡§Ü‡§£‡§ñ‡•Ä ‡§ï‡§æ‡§π‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§Ü‡§π‡•á‡§§ ‡§ï‡§æ!`,

        kannada: `‡≤®‡≤æ‡≤®‡≥Å ‡≤à‡≤ó ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥ ‡≤¨‡≤ó‡≥ç‡≤ó‡≥Ü ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤§‡≤ø‡≤≥‡≥Å‡≤µ‡≤≥‡≤ø‡≤ï‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≤°‡≥Ü‡≤¶‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤≠‡≤æ‡≤µ‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤®‡≥Ü. ‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤¶‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤∞‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤™‡≤°‡≤ø‡≤∏‡≤ø‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤≤‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤é‡≤≤‡≥ç‡≤≤‡≤µ‡≤®‡≥ç‡≤®‡≥Ç ‡≤∏‡≤æ‡≤∞‡≤æ‡≤Ç‡≤∂‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤®‡≥Ü.

üßæ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£ ‡≤∏‡≤æ‡≤∞‡≤æ‡≤Ç‡≤∂
‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤∞‡≥Å‡≤µ ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü, ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤ó‡≤≥‡≤ø‡≤µ‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü.

‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥ ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü ‡≤®‡≤æ‡≤®‡≥Å ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤®‡≥Ü.

üß† ‡≤ï‡≥ç‡≤≤‡≤ø‡≤®‡≤ø‡≤ï‡≤≤‡≥ç ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤Æ‡≤æ‡≤™‡≤®
‡≤á‡≤¶‡≥Å ‡≤í‡≤§‡≥ç‡≤§‡≤°, ‡≤Ü‡≤Ø‡≤æ‡≤∏ ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≤£‡≥ç‡≤£ ‡≤∏‡≥ã‡≤Ç‡≤ï‡≥Å‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤∏‡≤ø‡≤∞‡≤¨‡≤π‡≥Å‡≤¶‡≥Å, ‡≤Ü‡≤¶‡≤∞‡≥Ü ‡≤á‡≤¶‡≥Å ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤∞‡≥ã‡≤ó‡≤®‡≤ø‡≤∞‡≥ç‡≤£‡≤Ø‡≤µ‡≤≤‡≥ç‡≤≤.

üßò ‡≤ú‡≥Ä‡≤µ‡≤®‡≤∂‡≥à‡≤≤‡≤ø ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®
‡≤µ‡≤ø‡≤∂‡≥ç‡≤∞‡≤æ‡≤Ç‡≤§‡≤ø ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å, ‡≤π‡≥à‡≤°‡≥ç‡≤∞‡≥á‡≤ü‡≥Ü‡≤°‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤∞‡≤≤‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≥á‡≤≤‡≥ç‡≤µ‡≤ø‡≤ö‡≤æ‡≤∞‡≤£‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø. ‡≤∏‡≤æ‡≤ï‡≤∑‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤¶‡≥ç‡≤∞‡≥Ü ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤π‡≤ó‡≥Å‡≤∞‡≤µ‡≤æ‡≤¶, ‡≤™‡≥å‡≤∑‡≥ç‡≤ü‡≤ø‡≤ï ‡≤Ü‡≤π‡≤æ‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≥Ü‡≤ó‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø.

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (‡≤∏‡≤æ‡≤Ç‡≤™‡≥ç‡≤∞‡≤¶‡≤æ‡≤Ø‡≤ø‡≤ï ‡≤™‡≤∞‡≤ø‡≤π‡≤æ‡≤∞‡≤ó‡≤≥‡≥Å)
1. ‡≤∂‡≥Å‡≤Ç‡≤†‡≤ø ‡≤ö‡≤π‡≤æ ‡≤ú‡≥á‡≤®‡≥Å‡≤§‡≥Å‡≤™‡≥ç‡≤™‡≤¶‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü: ‡≤§‡≤æ‡≤ú‡≤æ ‡≤∂‡≥Å‡≤Ç‡≤†‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å 5 ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑‡≤ó‡≤≥ ‡≤ï‡≤æ‡≤≤ ‡≤®‡≥Ä‡≤∞‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥Å‡≤¶‡≤ø‡≤∏‡≤ø, ‡≤∂‡≥ã‡≤ß‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤¨‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ó‡≤ø‡≤∞‡≥Å‡≤µ‡≤æ‡≤ó ‡≤ú‡≥á‡≤®‡≥Å‡≤§‡≥Å‡≤™‡≥ç‡≤™ ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø. ‡≤¶‡≤ø‡≤®‡≤ï‡≥ç‡≤ï‡≥Ü 2-3 ‡≤¨‡≤æ‡≤∞‡≤ø ‡≤ï‡≥Å‡≤°‡≤ø‡≤Ø‡≤ø‡≤∞‡≤ø.
2. ‡≤Ö‡≤∞‡≤ø‡≤∂‡≤ø‡≤® ‡≤π‡≤æ‡≤≤‡≥Å: ‡≤Æ‡≤≤‡≤ó‡≥Å‡≤µ ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å ‡≤¨‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ó‡≤ø‡≤® ‡≤π‡≤æ‡≤≤‡≤ø‡≤ó‡≥Ü ‡≤ö‡≤ø‡≤ü‡≤ø‡≤ï‡≥Ü ‡≤Ö‡≤∞‡≤ø‡≤∂‡≤ø‡≤® ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø. ‡≤á‡≤¶‡≥Å ‡≤â‡≤∞‡≤ø‡≤Ø‡≥Ç‡≤§‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤®‡≤ø‡≤¶‡≥ç‡≤∞‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤â‡≤§‡≥ç‡≤§‡≥á‡≤ú‡≤ø‡≤∏‡≤≤‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≤¶‡≥Ü.

üìÖ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å‡≤ó‡≤≥‡≥Å
‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≥Å 2-3 ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤ø‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤π‡≤¶‡≤ó‡≥Ü‡≤ü‡≥ç‡≤ü‡≤∞‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤á‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü, ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≥Å‡≤Ç‡≤¶‡≤ø‡≤® ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤Æ‡≤æ‡≤™‡≤® ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®‡≤ï‡≥ç‡≤ï‡≤æ‡≤ó‡≤ø ‡≤™‡≥ç‡≤∞‡≤Æ‡≤æ‡≤£‡≤ø‡≤§ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø.

üîí ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤π‡≤ï‡≥ç‡≤ï‡≥Å ‡≤®‡≤ø‡≤∞‡≤æ‡≤ï‡≤∞‡≤£‡≥Ü
‡≤á‡≤¶‡≥Å ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤™‡≤°‡≥Ü‡≤¶ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤Ö‡≤≠‡≤ø‡≤™‡≥ç‡≤∞‡≤æ‡≤Ø‡≤¶ ‡≤¨‡≤¶‡≤≤‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤. ‡≤ó‡≤Ç‡≤≠‡≥Ä‡≤∞ ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤®‡≤ø‡≤∞‡≤Ç‡≤§‡≤∞ ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó‡≤≤‡≥Ç ‡≤®‡≤ø‡≤ú‡≤µ‡≤æ‡≤¶ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø.

‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ø‡≤® ‡≤™‡≥ç‡≤∞‡≤∂‡≥ç‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤ï‡≤æ‡≤≥‡≤ú‡≤ø‡≤ó‡≤≥‡≤ø‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤®‡≤ó‡≥Ü ‡≤§‡≤ø‡≤≥‡≤ø‡≤∏‡≤ø!`
    };

    return fallbacks[currentLanguage] || fallbacks.english;
}

function getFallbackGuidance() {
    console.log('Using fallback guidance due to API failure');

    const fallbacks = {
        english: `üßæ **Symptom Summary**
Based on what you've shared, I understand you're experiencing some health concerns.

üß† **Possible Non-Diagnostic Explanation**
This might be related to common conditions like stress, fatigue, or minor infections, but this is not a medical diagnosis.

üßò **Lifestyle Guidance**
Try to rest, stay hydrated, and monitor your symptoms. Avoid spicy food and get adequate sleep.

üåø **‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡§æ ‡§®‡•Å‡§∏‡•ç‡§ñ‡§æ (Traditional Remedies)**
1. Ginger tea with honey - Boil fresh ginger in water, add honey when warm
2. Turmeric milk - Add a pinch of turmeric to warm milk before bed

üìÖ **When to See a Doctor**
If symptoms persist beyond 2-3 days or worsen, please consult a certified doctor.

üîí **Safety Disclaimer**
This is not a replacement for licensed medical opinion. Always consult a real doctor for serious or persistent conditions.`,

        hindi: `üßæ **‡§≤‡§ï‡•ç‡§∑‡§£ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂**
‡§Ü‡§™‡§®‡•á ‡§ú‡•ã ‡§¨‡§§‡§æ‡§Ø‡§æ ‡§π‡•à, ‡§â‡§∏‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•Å‡§õ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ‡§è‡§Ç ‡§π‡•à‡§Ç‡•§

üß† **‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§ó‡•à‡§∞-‡§®‡§ø‡§¶‡§æ‡§® ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ**
‡§Ø‡§π ‡§§‡§®‡§æ‡§µ, ‡§•‡§ï‡§æ‡§®, ‡§Ø‡§æ ‡§Æ‡§æ‡§Æ‡•Ç‡§≤‡•Ä ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§∏‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§

üßò **‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®**
‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á, ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡§®‡•á ‡§î‡§∞ ‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§

üåø **‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡§æ ‡§®‡•Å‡§∏‡•ç‡§ñ‡§æ**
1. ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡•Ä ‡§ö‡§æ‡§Ø ‡§∂‡§π‡§¶ ‡§ï‡•á ‡§∏‡§æ‡§• - ‡§§‡§æ‡§ú‡§æ ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡•ã ‡§™‡§æ‡§®‡•Ä ‡§Æ‡•á‡§Ç ‡§â‡§¨‡§æ‡§≤‡•á‡§Ç, ‡§ó‡§∞‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§∂‡§π‡§¶ ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Ç
2. ‡§π‡§≤‡•ç‡§¶‡•Ä ‡§¶‡•Ç‡§ß - ‡§∏‡•ã‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§ó‡§∞‡•ç‡§Æ ‡§¶‡•Ç‡§ß ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§ö‡•Å‡§ü‡§ï‡•Ä ‡§π‡§≤‡•ç‡§¶‡•Ä ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Ç

üìÖ **‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§ï‡§¨ ‡§Æ‡§ø‡§≤‡•á‡§Ç**
‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ 2-3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡§®‡•á ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§¨‡§ø‡§ó‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§

üîí **‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£**
‡§Ø‡§π ‡§≤‡§æ‡§á‡§∏‡•á‡§Ç‡§∏‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∞‡§æ‡§Ø ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§`,

        marathi: `üßæ **‡§≤‡§ï‡•ç‡§∑‡§£ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂**
‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ú‡•á ‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡•á ‡§§‡•ç‡§Ø‡§æ‡§µ‡§∞‡•Ç‡§® ‡§Æ‡§≤‡§æ ‡§∏‡§Æ‡§ú‡§§‡•á ‡§ï‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§ï‡§æ‡§π‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§Ü‡§π‡•á‡§§‡•§

üß† **‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø ‡§ó‡•à‡§∞-‡§®‡§ø‡§¶‡§æ‡§® ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£**
‡§π‡•á ‡§§‡§£‡§æ‡§µ, ‡§•‡§ï‡§µ‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§ï‡§ø‡§∞‡§ï‡•ã‡§≥ ‡§∏‡§Ç‡§∏‡§∞‡•ç‡§ó‡§æ‡§∂‡•Ä ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Ö‡§∏‡•Ç ‡§∂‡§ï‡§§‡•á, ‡§™‡§∞‡§Ç‡§§‡•Å ‡§π‡•á ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§æ‡§π‡•Ä‡•§

üßò **‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®**
‡§µ‡§ø‡§∂‡•ç‡§∞‡§æ‡§Ç‡§§‡•Ä ‡§ò‡•ç‡§Ø‡§æ, ‡§π‡§æ‡§Ø‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§æ‡§π‡§æ ‡§Ü‡§£‡§ø ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§µ‡§∞ ‡§≤‡§ï‡•ç‡§∑ ‡§†‡•á‡§µ‡§æ‡•§

üåø **‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡§æ ‡§®‡•Å‡§∏‡•ç‡§ñ‡§æ**
1. ‡§Ü‡§≤‡•á ‡§ö‡§π‡§æ ‡§Æ‡§ß‡§æ‡§∏‡§π - ‡§§‡§æ‡§ú‡•á ‡§Ü‡§≤‡•á ‡§™‡§æ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§â‡§ï‡§≥‡§µ‡§æ, ‡§ó‡§∞‡§Æ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§Æ‡§ß ‡§ò‡§æ‡§≤‡§æ
2. ‡§π‡§≥‡§¶ ‡§¶‡•Ç‡§ß - ‡§ù‡•ã‡§™‡§£‡•ç‡§Ø‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡•Ä ‡§ó‡§∞‡§Æ ‡§¶‡•Å‡§ß‡§æ‡§§ ‡§ö‡§ø‡§Æ‡•Ç‡§ü‡§≠‡§∞ ‡§π‡§≥‡§¶ ‡§ò‡§æ‡§≤‡§æ

üìÖ **‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§®‡§æ ‡§ï‡§ß‡•Ä ‡§≠‡•á‡§ü‡§æ‡§µ‡•á**
‡§ú‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•á 2-3 ‡§¶‡§ø‡§µ‡§∏‡§æ‡§Ç‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§∞‡§æ‡§π‡§ø‡§≤‡•Ä ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§µ‡§æ‡§¢‡§≤‡•Ä ‡§§‡§∞ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ‡•§

üîí **‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£**
‡§π‡•á ‡§™‡§∞‡§µ‡§æ‡§®‡§æ‡§ß‡§æ‡§∞‡§ï ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§∏‡§≤‡•ç‡§≤‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø ‡§®‡§æ‡§π‡•Ä‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡•Ä‡§∏‡§æ‡§†‡•Ä ‡§®‡•á‡§π‡§Æ‡•Ä ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ‡•§`,

        kannada: `üßæ **‡≤≤‡≤ï‡≥ç‡≤∑‡≤£ ‡≤∏‡≤æ‡≤∞‡≤æ‡≤Ç‡≤∂**
‡≤®‡≥Ä‡≤µ‡≥Å ‡≤π‡≤Ç‡≤ö‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤∞‡≥Å‡≤µ ‡≤Ü‡≤ß‡≤æ‡≤∞‡≤¶ ‡≤Æ‡≥á‡≤≤‡≥Ü, ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤ï‡≥Ü‡≤≤‡≤µ‡≥Å ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤∏‡≤Æ‡≤∏‡≥ç‡≤Ø‡≥Ü‡≤ó‡≤≥‡≤ø‡≤µ‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤®‡≤æ‡≤®‡≥Å ‡≤Ö‡≤∞‡≥ç‡≤•‡≤Æ‡≤æ‡≤°‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≤ø‡≤¶‡≥ç‡≤¶‡≥á‡≤®‡≥Ü‡•§

üß† **‡≤∏‡≤Ç‡≤≠‡≤µ‡≤®‡≥Ä‡≤Ø ‡≤Ö‡≤≤‡≥ç‡≤≤‡≤¶-‡≤∞‡≥ã‡≤ó‡≤®‡≤ø‡≤∞‡≥ç‡≤£‡≤Ø ‡≤µ‡≤ø‡≤µ‡≤∞‡≤£‡≥Ü**
‡≤á‡≤¶‡≥Å ‡≤í‡≤§‡≥ç‡≤§‡≤°, ‡≤Ü‡≤Ø‡≤æ‡≤∏ ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤∏‡≤£‡≥ç‡≤£ ‡≤∏‡≥ã‡≤Ç‡≤ï‡≥Å‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤∏‡≤Ç‡≤¨‡≤Ç‡≤ß‡≤ø‡≤∏‡≤ø‡≤∞‡≤¨‡≤π‡≥Å‡≤¶‡≥Å, ‡≤Ü‡≤¶‡≤∞‡≥Ü ‡≤á‡≤¶‡≥Å ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤∞‡≥ã‡≤ó‡≤®‡≤ø‡≤∞‡≥ç‡≤£‡≤Ø‡≤µ‡≤≤‡≥ç‡≤≤‡•§

üßò **‡≤ú‡≥Ä‡≤µ‡≤®‡≤∂‡≥à‡≤≤‡≤ø ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤®**
‡≤µ‡≤ø‡≤∂‡≥ç‡≤∞‡≤æ‡≤Ç‡≤§‡≤ø ‡≤™‡≤°‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø, ‡≤π‡≥à‡≤°‡≥ç‡≤∞‡≥á‡≤ü‡≥Ü‡≤°‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤∞‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≥á‡≤≤‡≥ç‡≤µ‡≤ø‡≤ö‡≤æ‡≤∞‡≤£‡≥Ü ‡≤Æ‡≤æ‡≤°‡≤ø‡•§

üåø **‡≤¶‡≤æ‡≤¶‡≤ø ‡≤Æ‡≤æ‡≤Ç ‡≤ï‡≤æ ‡≤®‡≥Å‡≤∏‡≥ç‡≤ñ‡≤æ**
1. ‡≤∂‡≥Å‡≤Ç‡≤†‡≤ø ‡≤ö‡≤π‡≤æ ‡≤ú‡≥á‡≤®‡≥Å‡≤§‡≥Å‡≤™‡≥ç‡≤™‡≤¶‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü - ‡≤§‡≤æ‡≤ú‡≤æ ‡≤∂‡≥Å‡≤Ç‡≤†‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≥Ä‡≤∞‡≤ø‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ï‡≥Å‡≤¶‡≤ø‡≤∏‡≤ø, ‡≤¨‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ó‡≤æ‡≤¶‡≤æ‡≤ó ‡≤ú‡≥á‡≤®‡≥Å‡≤§‡≥Å‡≤™‡≥ç‡≤™ ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø
2. ‡≤Ö‡≤∞‡≤ø‡≤∂‡≤ø‡≤® ‡≤π‡≤æ‡≤≤‡≥Å - ‡≤Æ‡≤≤‡≤ó‡≥Å‡≤µ ‡≤Æ‡≥ä‡≤¶‡≤≤‡≥Å ‡≤¨‡≥Ü‡≤ö‡≥ç‡≤ö‡≤ó‡≤ø‡≤® ‡≤π‡≤æ‡≤≤‡≤ø‡≤ó‡≥Ü ‡≤ö‡≤ø‡≤ü‡≤ø‡≤ï‡≥Ü ‡≤Ö‡≤∞‡≤ø‡≤∂‡≤ø‡≤® ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø

üìÖ **‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó ‡≤≠‡≥á‡≤ü‡≤ø‡≤Ø‡≤æ‡≤ó‡≤¨‡≥á‡≤ï‡≥Å**
‡≤≤‡≤ï‡≥ç‡≤∑‡≤£‡≤ó‡≤≥‡≥Å 2-3 ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≤ø‡≤ó‡≤ø‡≤Ç‡≤§ ‡≤π‡≥Ü‡≤ö‡≥ç‡≤ö‡≥Å ‡≤á‡≤¶‡≥ç‡≤¶‡≤∞‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤π‡≤¶‡≤ó‡≥Ü‡≤ü‡≥ç‡≤ü‡≤∞‡≥Ü, ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø‡•§

üîí **‡≤∏‡≥Å‡≤∞‡≤ï‡≥ç‡≤∑‡≤§‡≤æ ‡≤π‡≤ï‡≥ç‡≤ï‡≥Å ‡≤®‡≤ø‡≤∞‡≤æ‡≤ï‡≤∞‡≤£‡≥Ü**
‡≤á‡≤¶‡≥Å ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤™‡≤°‡≥Ü‡≤¶ ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤ï‡≥Ä‡≤Ø ‡≤Ö‡≤≠‡≤ø‡≤™‡≥ç‡≤∞‡≤æ‡≤Ø‡≤¶ ‡≤¨‡≤¶‡≤≤‡≤ø‡≤Ø‡≤≤‡≥ç‡≤≤‡•§ ‡≤ó‡≤Ç‡≤≠‡≥Ä‡≤∞ ‡≤™‡≤∞‡≤ø‡≤∏‡≥ç‡≤•‡≤ø‡≤§‡≤ø‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó‡≤≤‡≥Ç ‡≤µ‡≥à‡≤¶‡≥ç‡≤Ø‡≤∞‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≤∞‡≥ç‡≤ï‡≤ø‡≤∏‡≤ø‡•§`
    };

    return fallbacks[currentLanguage] || fallbacks.english;
}

function showLoading(show) {
    document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
}

async function generateReport() {
    showLoading(true);

    try {
        const reportData = prepareReportData();
        const aiAssessment = await getAIAssessmentForReport();
        await generatePDFReport(reportData, aiAssessment);
    } catch (error) {
        console.error('Error generating report:', error);
        const errorMessage = currentLanguage === 'hindi' ?
            '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' :
            currentLanguage === 'marathi' ?
            '‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.' :
            currentLanguage === 'kannada' ?
            '‡≤µ‡≤∞‡≤¶‡≤ø ‡≤∞‡≤ö‡≤ø‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.' :
            'Error generating report. Please try again.';
        addMessage(errorMessage, 'ai');
    } finally {
        showLoading(false);
    }
}

function prepareReportData() {
    const now = new Date();
    const healthId = `AR-${now.getFullYear()}${(now.getMonth() + 1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;

    // Collect all consultation Q&A pairs
    const consultationData = conversationHistory.map((item, index) => ({
        questionNumber: index + 1,
        question: item.question,
        answer: item.answer || 'No response provided'
    }));

    // Extract key information from conversation history
    let symptoms = 'Not specified';
    let duration = 'Not specified';
    let severity = 'Not specified';
    let frequency = 'Not specified';
    let associated = 'None reported';
    let history = 'None reported';
    let medications = 'None reported';
    let allergies = 'None reported';
    let lifestyle = 'Not specified';
    let triggers = 'None identified';
    let previousTreatments = 'None reported';

    // Analyze conversation history to extract structured data
    conversationHistory.forEach((item, index) => {
        if (!item.answer) return;

        const question = item.question.toLowerCase();
        const answer = item.answer;

        // Identify main symptoms (usually first question)
        if (index === 0 || question.includes('symptom') || question.includes('problem') || question.includes('bothering')) {
            symptoms = answer;
        }

        // Duration patterns
        if (question.includes('when') || question.includes('how long') || question.includes('start') || question.includes('duration')) {
            duration = answer;
        }

        // Severity patterns
        if (question.includes('severe') || question.includes('pain') || question.includes('scale') || question.includes('bad')) {
            severity = answer;
        }

        // Frequency patterns
        if (question.includes('often') || question.includes('frequency') || question.includes('times')) {
            frequency = answer;
        }

        // Associated symptoms
        if (question.includes('other') || question.includes('associated') || question.includes('along') || question.includes('fever')) {
            associated = answer;
        }

        // Medical history
        if (question.includes('history') || question.includes('before') || question.includes('previous') || question.includes('past')) {
            history = answer;
        }

        // Medications
        if (question.includes('medication') || question.includes('medicine') || question.includes('taking') || question.includes('drug')) {
            medications = answer;
        }

        // Allergies
        if (question.includes('allerg') || answer.toLowerCase().includes('allerg')) {
            allergies = answer;
        }

        // Lifestyle
        if (question.includes('lifestyle') || question.includes('routine') || question.includes('sleep') || question.includes('exercise')) {
            lifestyle = answer;
        }

        // Triggers
        if (question.includes('trigger') || question.includes('cause') || question.includes('worse')) {
            triggers = answer;
        }

        // Previous treatments
        if (question.includes('treatment') || question.includes('tried') || question.includes('help')) {
            previousTreatments = answer;
        }
    });

    return {
        name: userInfo.name,
        age: userInfo.age,
        gender: userInfo.gender,
        location: userInfo.city,
        language: currentLanguage,
        date: now.toLocaleDateString('en-IN', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        }),
        time: now.toLocaleTimeString('en-IN', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        }),
        healthId: healthId,
        consultationData: consultationData,
        symptoms: symptoms,
        duration: duration,
        severity: severity,
        frequency: frequency,
        associated: associated,
        history: history,
        medications: medications,
        allergies: allergies,
        lifestyle: lifestyle,
        triggers: triggers,
        previousTreatments: previousTreatments,
        aiGuidance: aiGuidanceResponse || 'AI guidance not available'
    };
}

async function generatePDFReport(data, aiAssessment) {
    console.log('üî•üî•üî• NEW FORMAT PDF GENERATION STARTING!');
    console.log('üî• generatePDFReport called with:', data, aiAssessment);

    try {
        // Use the new format PDF generation ONLY
        if (typeof window.jspdf !== 'undefined' || typeof jsPDF !== 'undefined') {
            console.log('üî• Calling generatePDFWithJsPDF with healthId:', data.healthId);
            generatePDFWithJsPDF(data.healthId);
        } else {
            console.log('üî• jsPDF not available, using text fallback');
            // Fallback to text download with new format
            generateTextReportNewFormat(data.healthId);
        }

    } catch (error) {
        console.error('Error generating PDF:', error);
        // Fallback to new format text report
        generateTextReportNewFormat(data.healthId);
    }
}

function generateTextReportNewFormat(healthId) {
    try {
        // Get current date and time
        const now = new Date();
        const dateStr = now.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const timeStr = now.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        }) + ' IST';
        const reportHealthId = healthId || `AR-${now.getFullYear()}${String(now.getMonth()+1).padStart(2,'0')}${String(now.getDate()).padStart(2,'0')}-${String(Math.floor(Math.random()*1000)).padStart(3,'0')}`;

        // Extract intelligent data from conversation
        const chiefComplaint = extractChiefComplaint();
        const duration = extractDuration();
        const severity = extractSeverity();
        const frequency = extractFrequency();
        const associatedSymptoms = extractAssociatedSymptoms();
        const medicalHistory = extractMedicalHistory();
        const currentMedications = extractCurrentMedications();
        const allergies = extractAllergies();
        const possibleCondition = extractPossibleCondition();
        const confidenceLevel = extractConfidenceLevel();
        const riskLevel = extractRiskLevel();
        const emergencyAlert = extractEmergencyAlert();
        const remedies = extractTraditionalRemedies();

        const patientName = userInfo.name || "_________________________";
        const patientLocation = userInfo.city || "____________________";

        const reportContent = `AROGYA AI - EARLY DIAGNOSTIC REPORT

Name: ${patientName}    Location: ${patientLocation}
Date: ${dateStr}    Time: ${timeStr}    Health ID: ${reportHealthId}

COLLECTED SYMPTOMS
- Chief Complaint: ${chiefComplaint}
- Duration: ${duration}    - Severity (1-10): ${severity}    - Frequency: ${frequency}
- Associated Symptoms: ${associatedSymptoms}
- Medical History: ${medicalHistory}
- Current Medications: ${currentMedications}
- Allergies: ${allergies}

AI PRELIMINARY ASSESSMENT
Possible Condition: ${possibleCondition}
AI Confidence Level: ${confidenceLevel}%    Risk Level: ${riskLevel}
Emergency Alert: ${emergencyAlert}

TRADITIONAL REMEDIES
1. Recommended Remedy: ${remedies.primary}
   Usage Instructions: ${remedies.primaryInstructions}
2. Alternative Remedy: ${remedies.alternative}
   Usage Instructions: ${remedies.alternativeInstructions}

DOCTOR ANALYSIS & DIAGNOSIS
Doctor Name: _________________________    License No: ____________________

Clinical Diagnosis: _____________________________________________________

Prescribed Medications:
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________

-----------------------------------------------------_____________________________________________________________________________________

Additional Instructions/Follow-up:
_______________________________________________________________________
_______________________________________________________________________
Doctor Signature: _________________________    Date: _______________

Generated by Arogya AI v2.0 - For informational purposes only`;

        // Create and download text file
        const blob = new Blob([reportContent], { type: 'text/plain; charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Arogya_AI_Report_${reportHealthId}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        // Show success message
        const successMessage = currentLanguage === 'hindi' ?
            `‚úÖ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à!\nüìÑ ‡§´‡§º‡§æ‡§á‡§≤: Arogya_AI_Report_${reportHealthId}.txt` :
            currentLanguage === 'marathi' ?
            `‚úÖ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ù‡§æ‡§≤‡§æ!\nüìÑ ‡§´‡§æ‡§á‡§≤: Arogya_AI_Report_${reportHealthId}.txt` :
            currentLanguage === 'kannada' ?
            `‚úÖ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤µ‡≤∞‡≤¶‡≤ø ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤°‡≥å‡≤®‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü!\nüìÑ ‡≤´‡≥à‡≤≤‡≥ç: Arogya_AI_Report_${reportHealthId}.txt` :
            `‚úÖ Health report downloaded successfully!\nüìÑ File: Arogya_AI_Report_${reportHealthId}.txt`;

        addMessage(successMessage, 'ai');

    } catch (error) {
        console.error('Error generating text report:', error);
        const errorMessage = currentLanguage === 'hindi' ?
            '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' :
            'Error generating report. Please try again.';
        addMessage(errorMessage, 'ai');
    }
}

async function getAIAssessmentForReport() {
    const prompt = `Based on the consultation data, provide assessment in this format:

Possible Condition: [condition name]
AI Confidence Level: [percentage]%
Risk Level: [Low/Moderate/High]
Emergency Alert: [None/Monitor Closely/SEEK IMMEDIATE CARE]

Traditional Remedies:
1. Recommended Remedy: [remedy name]
   Usage Instructions: [instructions]
2. Alternative Remedy: [remedy name]
   Usage Instructions: [instructions]

Patient consultation data:
${conversationHistory.map((item, index) => `Q${index + 1}: ${item.question}\nA${index + 1}: ${item.answer}`).join('\n\n')}`;

    try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${API_KEYS.GROQ}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'llama3-8b-8192',
                messages: [
                    {
                        role: 'system',
                        content: 'You are Dr. Arogya. Provide a concise medical assessment for a report. Be factual and include traditional remedies. Follow the exact format requested.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: 0.5,
                max_tokens: 800
            })
        });

        if (response.ok) {
            const data = await response.json();
            if (data && data.choices && data.choices[0] && data.choices[0].message) {
                return data.choices[0].message.content;
            }
        }
    } catch (error) {
        console.error('Error getting AI assessment:', error);
    }

    return `Possible Condition: Based on reported symptoms
AI Confidence Level: Preliminary assessment only
Risk Level: Low/Moderate/High
Emergency Alert: None/Monitor Closely/Seek Immediate Care

Traditional Remedies:
1. Recommended Remedy: As discussed in consultation
   Usage Instructions: Follow traditional practices
2. Alternative Remedy: General wellness practices
   Usage Instructions: Maintain healthy lifestyle`;
}



// Helper functions to extract data from conversation
function extractChiefComplaint() {
    if (conversationHistory.length > 0) {
        const firstUserMessage = conversationHistory.find(msg => msg.type === 'user');
        return firstUserMessage ? firstUserMessage.message.substring(0, 50) + "..." : "Not specified";
    }
    return "Not specified";
}

function extractDuration() {
    const durationKeywords = ['day', 'week', 'month', 'year', 'hour', 'since', 'for'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of durationKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    const words = msg.message.split(' ');
                    const index = words.findIndex(word => word.toLowerCase().includes(keyword));
                    if (index > 0) return words[index - 1] + ' ' + words[index];
                }
            }
        }
    }
    return "Not specified";
}

function extractSeverity() {
    const severityPattern = /(\d+)(?:\s*(?:out of|\/)\s*10|\s*(?:scale|severity))/i;
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            const match = msg.message.match(severityPattern);
            if (match) return match[1] + "/10";
        }
    }
    return "Not rated";
}

function extractFrequency() {
    const frequencyKeywords = ['daily', 'weekly', 'hourly', 'constantly', 'occasionally', 'rarely', 'frequent'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of frequencyKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return keyword.charAt(0).toUpperCase() + keyword.slice(1);
                }
            }
        }
    }
    return "Not specified";
}

function extractAssociatedSymptoms() {
    const symptoms = [];
    const symptomKeywords = ['pain', 'fever', 'headache', 'nausea', 'fatigue', 'cough', 'cold', 'weakness'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of symptomKeywords) {
                if (msg.message.toLowerCase().includes(keyword) && !symptoms.includes(keyword)) {
                    symptoms.push(keyword);
                }
            }
        }
    }
    return symptoms.length > 0 ? symptoms.join(', ') : "None reported";
}

function extractMedicalHistory() {
    const historyKeywords = ['diabetes', 'hypertension', 'heart', 'surgery', 'allergy', 'medication', 'treatment'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of historyKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "Previous medical conditions mentioned";
                }
            }
        }
    }
    return "No significant history";
}

function extractCurrentMedications() {
    const medicationKeywords = ['taking', 'medicine', 'tablet', 'pill', 'drug', 'medication'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of medicationKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "Medications mentioned in consultation";
                }
            }
        }
    }
    return "None reported";
}

function extractAllergies() {
    const allergyKeywords = ['allergic', 'allergy', 'reaction', 'sensitive'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of allergyKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "Allergies mentioned";
                }
            }
        }
    }
    return "None known";
}

function extractPossibleCondition() {
    // Look for AI responses that mention possible conditions
    for (let msg of conversationHistory) {
        if (msg.type === 'ai' && (msg.message.toLowerCase().includes('condition') ||
            msg.message.toLowerCase().includes('diagnosis') ||
            msg.message.toLowerCase().includes('suggest'))) {
            // Extract first sentence that might contain condition
            const sentences = msg.message.split('.');
            for (let sentence of sentences) {
                if (sentence.toLowerCase().includes('condition') || sentence.toLowerCase().includes('suggest')) {
                    return sentence.trim().substring(0, 60) + "...";
                }
            }
        }
    }
    return "Preliminary assessment pending";
}

function extractConfidenceLevel() {
    // Generate confidence based on conversation depth
    const userMessages = conversationHistory.filter(msg => msg.type === 'user').length;
    if (userMessages >= 5) return "85";
    if (userMessages >= 3) return "70";
    if (userMessages >= 1) return "60";
    return "50";
}

function extractRiskLevel() {
    const highRiskKeywords = ['severe', 'emergency', 'urgent', 'critical', 'intense'];
    const moderateRiskKeywords = ['moderate', 'concerning', 'persistent', 'worsening'];

    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of highRiskKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "‚óè High";
                }
            }
            for (let keyword of moderateRiskKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "‚óè Moderate";
                }
            }
        }
    }
    return "‚óè Low";
}

function extractEmergencyAlert() {
    const emergencyKeywords = ['emergency', 'urgent', 'severe', 'critical', 'chest pain', 'difficulty breathing'];

    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of emergencyKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "‚óè SEEK IMMEDIATE CARE";
                }
            }
        }
    }

    // Check for moderate symptoms
    const monitorKeywords = ['persistent', 'worsening', 'concerning', 'unusual'];
    for (let msg of conversationHistory) {
        if (msg.type === 'user') {
            for (let keyword of monitorKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    return "‚óè Monitor Closely";
                }
            }
        }
    }

    return "‚óè None";
}

function generateNewFormatPreview() {
    // Get current date and time
    const now = new Date();
    const dateStr = now.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    const timeStr = now.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
    }) + ' IST';
    const reportHealthId = `AR-${now.getFullYear()}${String(now.getMonth()+1).padStart(2,'0')}${String(now.getDate()).padStart(2,'0')}-${String(Math.floor(Math.random()*1000)).padStart(3,'0')}`;

    // Extract intelligent data from conversation
    const chiefComplaint = extractChiefComplaint();
    const duration = extractDuration();
    const severity = extractSeverity();
    const frequency = extractFrequency();
    const associatedSymptoms = extractAssociatedSymptoms();
    const medicalHistory = extractMedicalHistory();
    const currentMedications = extractCurrentMedications();
    const allergies = extractAllergies();
    const possibleCondition = extractPossibleCondition();
    const confidenceLevel = extractConfidenceLevel();
    const riskLevel = extractRiskLevel();
    const emergencyAlert = extractEmergencyAlert();
    const remedies = extractTraditionalRemedies();

    const patientName = userInfo.name || "_________________________";
    const patientLocation = userInfo.city || "____________________";

    return `ü©∫ AROGYA AI - EARLY DIAGNOSTIC REPORT

üë§ Name: ${patientName}    üìç Location: ${patientLocation}
üìÜ Date: ${dateStr}    üïí Time: ${timeStr}    üî¢ Health ID: ${reportHealthId}

üìã COLLECTED SYMPTOMS
‚Ä¢ Chief Complaint: ${chiefComplaint}
‚Ä¢ Duration: ${duration}    ‚Ä¢ Severity (1-10): ${severity}    ‚Ä¢ Frequency: ${frequency}
‚Ä¢ Associated Symptoms: ${associatedSymptoms}
‚Ä¢ Medical History: ${medicalHistory}
‚Ä¢ Current Medications: ${currentMedications}
‚Ä¢ Allergies: ${allergies}

ü§ñ AI PRELIMINARY ASSESSMENT
Possible Condition: ${possibleCondition}
AI Confidence Level: ${confidenceLevel}%    Risk Level: ${riskLevel}
Emergency Alert: ${emergencyAlert}

üåø ‡§¶‡§æ‡§¶‡•Ä ‡§Æ‡§æ‡§Å ‡§ï‡•á ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á (TRADITIONAL REMEDIES)
1. Recommended Remedy: ${remedies.primary}
   Usage Instructions: ${remedies.primaryInstructions}
2. Alternative Remedy: ${remedies.alternative}
   Usage Instructions: ${remedies.alternativeInstructions}

üë®‚Äç‚öïÔ∏è DOCTOR ANALYSIS & DIAGNOSIS
Doctor Name: _________________________    License No: ____________________

Clinical Diagnosis: _____________________________________________________

Prescribed Medications:
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________
_______________________________________________________________________

-----------------------------------------------------_____________________________________________________________________________________

Additional Instructions/Follow-up:
_______________________________________________________________________
_______________________________________________________________________
Doctor Signature: _________________________    Date: _______________

Generated by Arogya AI v2.0 - For informational purposes only`;
}

function extractTraditionalRemedies() {
    const remedyKeywords = ['remedy', 'traditional', 'home', 'natural', 'herbal', 'ayurvedic'];
    let primaryRemedy = "Warm water with honey and ginger";
    let primaryInstructions = "Take twice daily, morning and evening";
    let alternativeRemedy = "Turmeric milk before bedtime";
    let alternativeInstructions = "Mix 1 tsp turmeric in warm milk";

    // Look for AI responses mentioning remedies
    for (let msg of conversationHistory) {
        if (msg.type === 'ai') {
            for (let keyword of remedyKeywords) {
                if (msg.message.toLowerCase().includes(keyword)) {
                    // Extract remedy suggestions from AI response
                    const sentences = msg.message.split('.');
                    for (let sentence of sentences) {
                        if (sentence.toLowerCase().includes('remedy') || sentence.toLowerCase().includes('traditional')) {
                            primaryRemedy = sentence.trim().substring(0, 50) + "...";
                            break;
                        }
                    }
                }
            }
        }
    }

    return {
        primary: primaryRemedy,
        primaryInstructions: primaryInstructions,
        alternative: alternativeRemedy,
        alternativeInstructions: alternativeInstructions
    };
}

function generatePDFWithJsPDF(healthId) {
    console.log('üî•üî•üî• NEW FORMAT PDF GENERATION CALLED!', healthId);
    try {
        // Check if jsPDF is available
        let jsPDFClass;
        if (window.jspdf && window.jspdf.jsPDF) {
            jsPDFClass = window.jspdf.jsPDF;
        } else if (window.jsPDF) {
            jsPDFClass = window.jsPDF;
        } else {
            throw new Error('jsPDF not available');
        }

        const doc = new jsPDFClass('p', 'mm', 'a4');
        const margin = 15;
        let yPosition = 20;

        // Get current date and time
        const now = new Date();
        const dateStr = now.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const timeStr = now.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        }) + ' IST';
        const reportHealthId = `AR-${now.getFullYear()}${String(now.getMonth()+1).padStart(2,'0')}${String(now.getDate()).padStart(2,'0')}-${String(Math.floor(Math.random()*1000)).padStart(3,'0')}`;

        // Extract intelligent data from conversation
        const chiefComplaint = extractChiefComplaint();
        const duration = extractDuration();
        const severity = extractSeverity();
        const frequency = extractFrequency();
        const associatedSymptoms = extractAssociatedSymptoms();
        const medicalHistory = extractMedicalHistory();
        const currentMedications = extractCurrentMedications();
        const allergies = extractAllergies();
        const possibleCondition = extractPossibleCondition();
        const confidenceLevel = extractConfidenceLevel();
        const riskLevel = extractRiskLevel();
        const emergencyAlert = extractEmergencyAlert();
        const remedies = extractTraditionalRemedies();

        // ===== Single-Page Optimized Layout Helpers =====
        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const contentWidth = pageWidth - margin * 2;
        const maxContentHeight = pageHeight - margin * 2 - 15; // Reserve space for footer
        const lineHeight = 3.2; // Compact line height
        const sectionSpacing = 2; // Minimal section spacing

        // Plain-text sanitizer: keep only A-Z, a-z, 0-9, spaces, and basic punctuation . , : ; - ( ) /
        function sanitize(input) {
            return String(input ?? '')
                .normalize('NFKD')
                .replace(/[^A-Za-z0-9 .,;:\-()\/]/g, ' ')
                .replace(/\s+/g, ' ')
                .trim();
        }

        // Truncate text to fit within specified character limit
        function truncateText(text, maxChars) {
            const clean = sanitize(text);
            return clean.length > maxChars ? clean.substring(0, maxChars - 3) + '...' : clean;
        }

        function compactSectionHeader(title) {
            title = sanitize(title);
            doc.setFillColor(66, 133, 244);
            doc.rect(margin, yPosition, contentWidth, 6, 'F');
            doc.setTextColor(255, 255, 255);
            doc.setFont('helvetica', 'bold');
            doc.setFontSize(9);
            doc.text(title, margin + 1, yPosition + 4);
            doc.setTextColor(0, 0, 0);
            yPosition += 6 + sectionSpacing;
        }

        function compactLabelValue(label, value, maxValueChars = 60) {
            const safeVal = truncateText((value && String(value).trim()) ? String(value) : 'Not provided', maxValueChars);
            const safeLabel = sanitize(label);
            const labelWidth = 32; // mm - reduced from 36

            doc.setFont('helvetica', 'bold');
            doc.setFontSize(8);
            doc.text(safeLabel, margin, yPosition);
            doc.setFont('helvetica', 'normal');
            doc.text(safeVal, margin + labelWidth, yPosition);
            yPosition += lineHeight;
        }

        function compactBulletLine(text, maxChars = 80) {
            const truncated = truncateText(text, maxChars);
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(8);
            doc.text('- ', margin, yPosition);
            doc.text(truncated, margin + 3, yPosition);
            yPosition += lineHeight;
        }

        function compactInlineItems(items, separator = ' | ') {
            const combined = items.map(item => truncateText(item, 25)).join(separator);
            doc.setFont('helvetica', 'normal');
            doc.setFontSize(8);
            doc.text(combined, margin, yPosition);
            yPosition += lineHeight;
        }

        // ===== Compact Title Bar =====
        doc.setFillColor(240, 248, 255);
        doc.rect(margin, yPosition, contentWidth, 8, 'F');
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(33, 37, 41);
        doc.text(sanitize("AROGYA AI - EARLY DIAGNOSTIC REPORT"), margin, yPosition + 5.5);
        doc.setTextColor(0, 0, 0);
        yPosition += 10;

        // ===== Patient Information =====
        compactSectionHeader('Patient Information');
        const patientName = userInfo.name || 'Not provided';
        const patientAge = userInfo.age || 'Not provided';
        const patientGender = userInfo.gender || 'Not provided';
        const patientLocation = userInfo.city || 'Not provided';

        // Combine patient info in two compact lines
        compactInlineItems([`Name: ${truncateText(patientName, 20)}`, `Age: ${patientAge}`, `Gender: ${patientGender}`]);
        compactInlineItems([`Location: ${truncateText(patientLocation, 25)}`, `Date: ${dateStr}`, `Time: ${timeStr}`]);
        compactLabelValue('Health ID:', reportHealthId, 30);

        // ===== Collected Symptoms =====
        compactSectionHeader('Collected Symptoms');
        compactBulletLine(`Chief Complaint: ${chiefComplaint}`, 70);
        compactInlineItems([`Duration: ${truncateText(duration, 15)}`, `Severity: ${severity}`, `Frequency: ${truncateText(frequency, 15)}`]);
        compactBulletLine(`Associated Symptoms: ${associatedSymptoms}`, 70);
        compactBulletLine(`Medical History: ${medicalHistory}`, 70);
        compactBulletLine(`Current Medications: ${currentMedications}`, 70);
        compactBulletLine(`Allergies: ${allergies}`, 70);

        // ===== AI Preliminary Assessment =====
        compactSectionHeader('AI Preliminary Assessment');
        const riskSelected = (String(riskLevel).match(/Low|Moderate|High/) || ['Unknown'])[0];
        const emergencySelected = /SEEK/i.test(String(emergencyAlert))
            ? 'Seek Immediate Care'
            : /Monitor/i.test(String(emergencyAlert))
                ? 'Monitor Closely'
                : /None/i.test(String(emergencyAlert))
                    ? 'None'
                    : 'Unknown';

        compactLabelValue('Possible Condition:', possibleCondition, 50);
        compactInlineItems([`Confidence: ${confidenceLevel}%`, `Risk: ${riskSelected}`, `Alert: ${emergencySelected}`]);

        // ===== Traditional Remedies =====
        compactSectionHeader('Traditional Remedies');
        compactLabelValue('1. Recommended:', remedies.primary, 55);
        compactBulletLine(`Usage: ${remedies.primaryInstructions}`, 75);
        compactLabelValue('2. Alternative:', remedies.alternative, 55);
        compactBulletLine(`Usage: ${remedies.alternativeInstructions}`, 75);


        // ===== Doctor Analysis & Signature =====
        compactSectionHeader('Doctor Analysis & Diagnosis');
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(8);
        doc.text('Clinical Diagnosis:', margin, yPosition); yPosition += lineHeight;

        // Compact diagnosis lines
        doc.setDrawColor(200);
        for (let i = 0; i < 2; i++) {
            doc.line(margin, yPosition, margin + contentWidth, yPosition);
            yPosition += lineHeight;
        }

        doc.text('Prescribed Medications:', margin, yPosition); yPosition += lineHeight;
        // Compact medication lines (5 instead of 9)
        for (let i = 0; i < 5; i++) {
            doc.line(margin, yPosition, margin + contentWidth, yPosition);
            yPosition += lineHeight;
        }

        yPosition += sectionSpacing;
        doc.text('Doctor Signature: ____________________    Date: __________', margin, yPosition);
        yPosition += lineHeight + sectionSpacing;

        // ===== Compact Footer =====
        yPosition += sectionSpacing;
        doc.setFontSize(7);
        doc.setTextColor(108, 117, 125);
        const disclaimer = 'Disclaimer: AI-generated report for informational purposes only. Not a substitute for professional medical advice.';
        doc.text(disclaimer, margin, yPosition); yPosition += lineHeight;
        doc.text(`Generated by Arogya AI v2.0 | ${dateStr} ${timeStr}`, margin, yPosition);

        // Save the PDF (should be single page now)
        const fileName = `Arogya_AI_Report_${reportHealthId}.pdf`;
        // Add page number only if multiple pages exist
        const pageCount = doc.getNumberOfPages();
        if (pageCount > 1) {
            for (let i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                doc.setFontSize(7);
                doc.setTextColor(150);
                doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin - 20, pageHeight - 5);
            }
        }
        doc.save(fileName);

        // Show success message
        const successMessage = currentLanguage === 'hindi' ?
            `‚úÖ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§à!\nüìÑ ‡§´‡§º‡§æ‡§á‡§≤: ${fileName}` :
            currentLanguage === 'marathi' ?
            `‚úÖ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä‡§∞‡§ø‡§§‡•ç‡§Ø‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ù‡§æ‡§≤‡§æ!\nüìÑ ‡§´‡§æ‡§á‡§≤: ${fileName}` :
            currentLanguage === 'kannada' ?
            `‚úÖ ‡≤Ü‡≤∞‡≥ã‡≤ó‡≥ç‡≤Ø ‡≤µ‡≤∞‡≤¶‡≤ø ‡≤Ø‡≤∂‡≤∏‡≥ç‡≤µ‡≤ø‡≤Ø‡≤æ‡≤ó‡≤ø ‡≤°‡≥å‡≤®‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Ü‡≤ó‡≤ø‡≤¶‡≥Ü!\nüìÑ ‡≤´‡≥à‡≤≤‡≥ç: ${fileName}` :
            `‚úÖ Health report downloaded successfully!\nüìÑ File: ${fileName}`;

        // Create success message
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message ai-message';
        messageDiv.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-check-circle" style="color: #16a34a;"></i>
            </div>
            <div class="message-content success-message">
                <p>${successMessage}</p>
                <div class="success-animation">
                    <i class="fas fa-download pulse"></i>
                </div>
            </div>
        `;

        const messagesContainer = document.getElementById('chatMessages');
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // Show action buttons after delay
        setTimeout(() => {
            document.getElementById('actionButtons').style.display = 'flex';
        }, 2000);



    } catch (error) {
        console.error('Error generating PDF with jsPDF:', error);
        generateTextReportNewFormat(healthId);
    }
}





function startNewConsultation() {
    // Reset all variables
    consultationPhase = 'initial';
    userInfo = {};
    conversationHistory = [];
    collectedSymptoms = {};
    aiGuidanceResponse = '';
    questionCount = 0;
    isDataCollectionComplete = false;
    currentModelIndex = 0;

    // Clear chat
    document.getElementById('chatMessages').innerHTML = `
        <div class="message ai-message">
            <div class="message-avatar">
                <i class="fas fa-user-md"></i>
            </div>
            <div class="message-content">
                <p id="welcomeMessage">${translations[currentLanguage].welcome}</p>
            </div>
        </div>
    `;

    // Hide action buttons and show user info section
    document.getElementById('actionButtons').style.display = 'none';
    showUserInfoSection();
}

// Report Preview Functions
async function showReportPreview() {
    try {
        showLoading(true);

        // Prepare report data
        const reportData = prepareReportData();
        const aiAssessment = await getAIAssessmentForReport();
        const reportContent = generateNewFormatPreview();

        // Show preview in modal
        document.getElementById('reportPreviewContent').textContent = reportContent;
        document.getElementById('reportPreviewModal').style.display = 'flex';

        // Store data for actual generation
        window.pendingReportData = reportData;
        window.pendingAiAssessment = aiAssessment;

    } catch (error) {
        console.error('Error preparing report preview:', error);
        const errorMessage = currentLanguage === 'hindi' ?
            '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡•Ä‡§µ‡•ç‡§Ø‡•Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' :
            currentLanguage === 'marathi' ?
            '‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.' :
            currentLanguage === 'kannada' ?
            '‡≤µ‡≤∞‡≤¶‡≤ø ‡≤™‡≥Ç‡≤∞‡≥ç‡≤µ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤£‡≥Ü ‡≤§‡≤Ø‡≤æ‡≤∞‡≤ø‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.' :
            'Error preparing report preview. Please try again.';
        addMessage(errorMessage, 'ai');
    } finally {
        showLoading(false);
    }
}

function closeReportPreview() {
    document.getElementById('reportPreviewModal').style.display = 'none';
    // Clean up stored data
    delete window.pendingReportData;
    delete window.pendingAiAssessment;
}

async function confirmGenerateReport() {
    closeReportPreview();

    if (window.pendingReportData && window.pendingAiAssessment) {
        showLoading(true);
        try {
            await generatePDFReport(window.pendingReportData, window.pendingAiAssessment);
        } catch (error) {
            console.error('Error generating report:', error);
            const errorMessage = currentLanguage === 'hindi' ?
                '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§' :
                currentLanguage === 'marathi' ?
                '‡§Ö‡§π‡§µ‡§æ‡§≤ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.' :
                currentLanguage === 'kannada' ?
                '‡≤µ‡≤∞‡≤¶‡≤ø ‡≤∞‡≤ö‡≤ø‡≤∏‡≥Å‡≤µ‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¶‡≥ã‡≤∑. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.' :
                'Error generating report. Please try again.';
            addMessage(errorMessage, 'ai');
        } finally {
            showLoading(false);
            // Clean up stored data
            delete window.pendingReportData;
            delete window.pendingAiAssessment;
        }
    } else {
        // Fallback to original generation
        generateReport();
    }
}
